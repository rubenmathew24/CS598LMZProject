2025-05-02 17:20:55,772 - INFO - ================ generating test for matplotlib__matplotlib-23964 ================
2025-05-02 17:20:55,869 - INFO - prompting with message:
We are currently solving the following issue within our repository. Here is the issue text:
--- BEGIN ISSUE ---
[Bug]: Text label with empty line causes a "TypeError: cannot unpack non-iterable NoneType object" in PostScript backend
### Bug summary

When saving a figure with the PostScript backend, a
> TypeError: cannot unpack non-iterable NoneType object

happens if the figure contains a multi-line text label with an empty line (see example).

### Code for reproduction

```python
from matplotlib.figure import Figure

figure = Figure()
ax = figure.add_subplot(111)
# ax.set_title('\nLower title')  # this would cause an error as well
ax.annotate(text='\nLower label', xy=(0, 0))
figure.savefig('figure.eps')
```


### Actual outcome

$ ./venv/Scripts/python save_ps.py
Traceback (most recent call last):
  File "C:\temp\matplotlib_save_ps\save_ps.py", line 7, in <module>
    figure.savefig('figure.eps')
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\figure.py", line 3272, in savefig
    self.canvas.print_figure(fname, **kwargs)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\backend_bases.py", line 2338, in print_figure
    result = print_method(
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\backend_bases.py", line 2204, in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\_api\deprecation.py", line 410, in wrapper
    return func(*inner_args, **inner_kwargs)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\backends\backend_ps.py", line 869, in _print_ps
    printer(fmt, outfile, dpi=dpi, dsc_comments=dsc_comments,
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\backends\backend_ps.py", line 927, in _print_figure
    self.figure.draw(renderer)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\artist.py", line 74, in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\artist.py", line 51, in draw_wrapper
    return draw(artist, renderer)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\figure.py", line 3069, in draw
    mimage._draw_list_compositing_images(
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\image.py", line 131, in _draw_list_compositing_images
    a.draw(renderer)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\artist.py", line 51, in draw_wrapper
    return draw(artist, renderer)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\axes\_base.py", line 3106, in draw
    mimage._draw_list_compositing_images(
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\image.py", line 131, in _draw_list_compositing_images
    a.draw(renderer)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\artist.py", line 51, in draw_wrapper
    return draw(artist, renderer)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\text.py", line 1995, in draw
    Text.draw(self, renderer)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\artist.py", line 51, in draw_wrapper
    return draw(artist, renderer)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\text.py", line 736, in draw
    textrenderer.draw_text(gc, x, y, clean_line,
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\backends\backend_ps.py", line 248, in wrapper
    return meth(self, *args, **kwargs)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\backends\backend_ps.py", line 673, in draw_text
    for ps_name, xs_names in stream:
TypeError: cannot unpack non-iterable NoneType object


### Expected outcome

The figure can be saved as `figure.eps` without error.

### Additional information

- seems to happen if a text label or title contains a linebreak with an empty line
- works without error for other backends such as PNG, PDF, SVG, Qt
- works with matplotlib<=3.5.3
- adding `if curr_stream:` before line 669 of `backend_ps.py` seems to fix the bug 

### Operating system

Windows

### Matplotlib Version

3.6.0

### Matplotlib Backend

_No response_

### Python version

3.9.13

### Jupyter version

_No response_

### Installation

pip

--- END ISSUE ---

Please generate a complete test that can be used to reproduce the issue.

The complete test should contain the following:
1. Necessary imports
2. Code to reproduce the issue described in the issue text
3. Print "Issue reproduced" if the outcome indicates that the issue is reproduced
4. Print "Issue resolved" if the outcome indicates that the issue has been successfully resolved
5. Print "Other issues" if the outcome indicates there are other issues with the source code

Here is an example:

```python
from sqlfluff import lint

def test__rules__std_L060_raised() -> None:
    try:
        sql = "SELECT   IFNULL(NULL, 100),
            NVL(NULL,100);"
        result = lint(sql, rules=["L060"])
        assert len(result) == 2
    except:
        print("Other issues")
        return

    try:
        assert result[0]["description"] == "Use 'COALESCE' instead of 'IFNULL'."
        assert result[1]["description"] == "Use 'COALESCE' instead of 'NVL'."
        print("Issue resolved")
    except AssertionError:
        print("Issue reproduced")
        return

    return

test__rules__std_L060_raised()
```

Please ensure the generated test reflects the issue described in the provided issue text.
The generated test should be able to be used to both reproduce the issue as well as to verify the issue has been fixed.
Wrap the complete test in ```python...```.
2025-05-02 17:20:55,874 - INFO - Initializing a decoder model: gpt-4o-2024-05-13 ...
2025-05-03 14:15:16,458 - INFO - ================ generating test for matplotlib__matplotlib-23964 ================
2025-05-03 14:15:16,476 - INFO - prompting with message:
We are currently solving the following issue within our repository. Here is the issue text:
--- BEGIN ISSUE ---
[Bug]: Text label with empty line causes a "TypeError: cannot unpack non-iterable NoneType object" in PostScript backend
### Bug summary

When saving a figure with the PostScript backend, a
> TypeError: cannot unpack non-iterable NoneType object

happens if the figure contains a multi-line text label with an empty line (see example).

### Code for reproduction

```python
from matplotlib.figure import Figure

figure = Figure()
ax = figure.add_subplot(111)
# ax.set_title('\nLower title')  # this would cause an error as well
ax.annotate(text='\nLower label', xy=(0, 0))
figure.savefig('figure.eps')
```


### Actual outcome

$ ./venv/Scripts/python save_ps.py
Traceback (most recent call last):
  File "C:\temp\matplotlib_save_ps\save_ps.py", line 7, in <module>
    figure.savefig('figure.eps')
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\figure.py", line 3272, in savefig
    self.canvas.print_figure(fname, **kwargs)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\backend_bases.py", line 2338, in print_figure
    result = print_method(
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\backend_bases.py", line 2204, in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\_api\deprecation.py", line 410, in wrapper
    return func(*inner_args, **inner_kwargs)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\backends\backend_ps.py", line 869, in _print_ps
    printer(fmt, outfile, dpi=dpi, dsc_comments=dsc_comments,
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\backends\backend_ps.py", line 927, in _print_figure
    self.figure.draw(renderer)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\artist.py", line 74, in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\artist.py", line 51, in draw_wrapper
    return draw(artist, renderer)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\figure.py", line 3069, in draw
    mimage._draw_list_compositing_images(
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\image.py", line 131, in _draw_list_compositing_images
    a.draw(renderer)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\artist.py", line 51, in draw_wrapper
    return draw(artist, renderer)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\axes\_base.py", line 3106, in draw
    mimage._draw_list_compositing_images(
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\image.py", line 131, in _draw_list_compositing_images
    a.draw(renderer)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\artist.py", line 51, in draw_wrapper
    return draw(artist, renderer)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\text.py", line 1995, in draw
    Text.draw(self, renderer)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\artist.py", line 51, in draw_wrapper
    return draw(artist, renderer)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\text.py", line 736, in draw
    textrenderer.draw_text(gc, x, y, clean_line,
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\backends\backend_ps.py", line 248, in wrapper
    return meth(self, *args, **kwargs)
  File "C:\temp\matplotlib_save_ps\venv\lib\site-packages\matplotlib\backends\backend_ps.py", line 673, in draw_text
    for ps_name, xs_names in stream:
TypeError: cannot unpack non-iterable NoneType object


### Expected outcome

The figure can be saved as `figure.eps` without error.

### Additional information

- seems to happen if a text label or title contains a linebreak with an empty line
- works without error for other backends such as PNG, PDF, SVG, Qt
- works with matplotlib<=3.5.3
- adding `if curr_stream:` before line 669 of `backend_ps.py` seems to fix the bug 

### Operating system

Windows

### Matplotlib Version

3.6.0

### Matplotlib Backend

_No response_

### Python version

3.9.13

### Jupyter version

_No response_

### Installation

pip

--- END ISSUE ---

Please generate a complete test that can be used to reproduce the issue.

The complete test should contain the following:
1. Necessary imports
2. Code to reproduce the issue described in the issue text
3. Print "Issue reproduced" if the outcome indicates that the issue is reproduced
4. Print "Issue resolved" if the outcome indicates that the issue has been successfully resolved
5. Print "Other issues" if the outcome indicates there are other issues with the source code

Here is an example:

```python
from sqlfluff import lint

def test__rules__std_L060_raised() -> None:
    try:
        sql = "SELECT   IFNULL(NULL, 100),
            NVL(NULL,100);"
        result = lint(sql, rules=["L060"])
        assert len(result) == 2
    except:
        print("Other issues")
        return

    try:
        assert result[0]["description"] == "Use 'COALESCE' instead of 'IFNULL'."
        assert result[1]["description"] == "Use 'COALESCE' instead of 'NVL'."
        print("Issue resolved")
    except AssertionError:
        print("Issue reproduced")
        return

    return

test__rules__std_L060_raised()
```

Please ensure the generated test reflects the issue described in the provided issue text.
The generated test should be able to be used to both reproduce the issue as well as to verify the issue has been fixed.
Wrap the complete test in ```python...```.
2025-05-03 14:15:16,476 - INFO - Initializing a decoder model: gpt-4o-2024-05-13 ...
2025-05-03 14:15:16,483 - INFO - Creating API request
2025-05-03 14:15:21,023 - INFO - API response ChatCompletion(id='chatcmpl-BTCcOK9fgMx5mhuLfBu33nQSsKNc0', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\n\ndef test_postscript_backend_empty_line_issue():\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n        return\n    except Exception as e:\n        print("Other issues")\n        return\n\n    print("Issue resolved")\n\ntest_postscript_backend_empty_line_issue()\n```\n\nThis test script does the following:\n1. Imports the necessary `Figure` class from `matplotlib.figure`.\n2. Reproduces the issue by creating a figure, adding a subplot, and annotating it with a text label that contains an empty line.\n3. Attempts to save the figure in PostScript format.\n4. Catches the specific `TypeError` that indicates the issue has been reproduced and prints "Issue reproduced".\n5. Catches any other exceptions and prints "Other issues".\n6. If no exceptions are raised, it prints "Issue resolved".\n\nThis script can be used to both reproduce the issue and verify if the issue has been fixed.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None))], created=1746299716, model='gpt-4o-2024-05-13', object='chat.completion', service_tier='default', system_fingerprint='fp_b70b7e9c76', usage=CompletionUsage(completion_tokens=267, prompt_tokens=1616, total_tokens=1883, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))
2025-05-03 14:15:21,023 - INFO - Initializing a decoder model: gpt-4o-2024-05-13 ...
2025-05-03 14:15:21,234 - INFO - Creating API request
2025-05-03 14:15:57,525 - INFO - API response ChatCompletion(id='chatcmpl-BTCcTvQE6Qp0GLAi886SC6dFb54F4', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='Sure, here\'s the complete test script that follows the instructions provided:\n\n```python\nimport matplotlib\nfrom matplotlib.figure import Figure\n\ndef test_text_label_empty_line():\n    try:\n        # Create a figure and add a subplot with an annotation containing an empty line\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        # This line will trigger the issue\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        \n        # Try saving the figure using the PostScript backend\n        figure.savefig(\'figure.eps\', format=\'eps\')\n\n        # If no exception is raised, print "Issue resolved"\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            # If the specific error is caught, print "Issue reproduced"\n            print("Issue reproduced")\n        else:\n            # If other TypeErrors are caught, they indicate other issues\n            print("Other issues")\n    except Exception as e:\n        # If any other exception type is caught, print "Other issues"\n        print("Other issues")\n\n# Run the test\ntest_text_label_empty_line()\n```\n\nThis script:\n1. Imports the necessary modules.\n2. Reproduces the issue by creating a figure and adding a subplot with an annotation containing an empty line.\n3. Attempts to save the figure using the PostScript backend.\n4. Catches the specific `TypeError` and prints "Issue reproduced" if the error matches the description.\n5. Prints "Issue resolved" if no exception occurs.\n6. Prints "Other issues" if any other exceptions are raised.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=1, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\n\ndef test_issue_reproduction():\n    try:\n        # Create a figure and add a subplot\n        figure = plt.figure()\n        ax = figure.add_subplot(111)\n\n        # Add an annotation with a multiline text label containing an empty line\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n\n        # Try to save the figure as EPS\n        figure.savefig(\'figure.eps\')\n\n        # If no error occurs, print "Issue resolved"\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            # If the specific error occurs, print "Issue reproduced"\n            print("Issue reproduced")\n        else:\n            # If any other TypeError occurs, print "Other issues"\n            print("Other issues")\n    except Exception as e:\n        # If any other exception occurs, print "Other issues"\n        print("Other issues")\n\n# Run the test\ntest_issue_reproduction()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=2, logprobs=None, message=ChatCompletionMessage(content='Here\'s the complete test to reproduce and verify the issue described in the provided issue text:\n\n```python\nimport matplotlib\nfrom matplotlib.figure import Figure\nimport traceback\n\ndef test_postscript_backend_bug():\n    try:\n        # Step 1: Set up the figure and annotate with a multi-line text label containing an empty line\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n\n        # Step 2: Save the figure using the PostScript backend\n        figure.savefig(\'figure.eps\')\n\n        # If no error occurs, the issue is considered resolved\n        print("Issue resolved")\n\n    except TypeError as e:\n        # Check if the specific TypeError related to the issue is raised\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n            print(traceback.format_exc())\n    \n    except Exception as e:\n        # Any other exceptions are considered as other issues\n        print("Other issues")\n        print(traceback.format_exc())\n\ntest_postscript_backend_bug()\n```\n\nExplanation:\n1. **Necessary imports**: Import the necessary modules from `matplotlib` and `traceback` for handling exceptions.\n2. **Code to reproduce the issue**: Create a figure and add a multi-line text annotation with an empty line, then save the figure as `figure.eps` using the PostScript backend.\n3. **Print outcomes**:\n   - Print "Issue resolved" if the figure is saved without any errors.\n   - Print "Issue reproduced" if the specific `TypeError` related to the issue is raised.\n   - Print "Other issues" for any other exceptions and print the traceback for further debugging.\n\nThis test will help you verify whether the specified issue has been resolved or if it still persists.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=3, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\nimport traceback\n\ndef test_postscript_backend_issue():\n    try:\n        # Create a figure and axis\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        # Add a multi-line text label with an empty line\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        # Attempt to save the figure as a PostScript file\n        figure.savefig(\'figure.eps\')\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n            traceback.print_exc()\n    except Exception as e:\n        print("Other issues")\n        traceback.print_exc()\n\ntest_postscript_backend_issue()\n```\n\nThis script will:\n1. Import necessary modules.\n2. Create a figure and axis, then add a multi-line text label containing an empty line.\n3. Attempt to save the figure as a PostScript file.\n4. Print "Issue resolved" if the figure is saved without error.\n5. Print "Issue reproduced" if the specific `TypeError` is encountered.\n6. Print "Other issues" if any other exceptions occur, and print the traceback for debugging.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=4, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib\nfrom matplotlib.figure import Figure\n\ndef test_postscript_backend_issue():\n    # Set the backend to PostScript\n    matplotlib.use(\'PS\')\n\n    try:\n        # Create a figure and add a subplot\n        figure = Figure()\n        ax = figure.add_subplot(111)\n\n        # Add annotation with an empty line\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n\n        # Try to save the figure\n        figure.savefig(\'figure.eps\')\n\n        print("Issue resolved")\n\n    except TypeError as e:\n        # Check if the error is the specific TypeError described in the issue\n        if \'cannot unpack non-iterable NoneType object\' in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print(f"Other issues: {e}")\n\ntest_postscript_backend_issue()\n```\n\nThis script:\n1. Imports the necessary modules.\n2. Sets the backend to PostScript.\n3. Creates a figure and adds a subplot.\n4. Adds an annotation containing an empty line.\n5. Attempts to save the figure to a PostScript file.\n6. Prints "Issue resolved" if no exception occurs, indicating that the issue has been fixed.\n7. Prints "Issue reproduced" if the specific `TypeError` occurs, indicating the issue is still present.\n8. Prints "Other issues" if any other exception occurs.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=5, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\n\ndef test_postscript_backend_issue():\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        # ax.set_title(\'\\nLower title\')  # this would cause an error as well\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception:\n        print("Other issues")\n\ntest_postscript_backend_issue()\n```\n\nThis test script does the following:\n1. Imports the necessary `Figure` class from `matplotlib.figure`.\n2. Creates a figure and adds a subplot to it.\n3. Annotates the subplot with a text label that contains an empty line.\n4. Attempts to save the figure as an EPS file.\n5. If the specific `TypeError` is raised, it prints "Issue reproduced".\n6. If no error occurs, it prints "Issue resolved".\n7. If any other error occurs, it prints "Other issues".', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=6, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nfrom matplotlib.figure import Figure\n\ndef test_postscript_backend_empty_line():\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n        return\n    except Exception as e:\n        print("Other issues")\n        return\n\n    print("Issue resolved")\n\ntest_postscript_backend_empty_line()\n```\n\nExplanation:\n1. **Necessary imports**: The script begins with importing `matplotlib.pyplot` and `Figure` from `matplotlib.figure`.\n2. **Code to reproduce the issue**: A new figure is created, and an annotation with a multi-line text label containing an empty line is added. The figure is then saved using the PostScript backend.\n3. **Outcome checks**:\n   - If the `TypeError` with the specific message indicating the unpacking issue is raised, "Issue reproduced" is printed.\n   - If any other exception arises, "Other issues" is printed.\n   - If no exceptions occur and the file saves correctly, "Issue resolved" is printed.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=7, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\n\ndef test_postscript_backend_empty_line_bug():\n    try:\n        # Step 1: Reproduce the issue\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n        print("Issue resolved")\n    except TypeError as e:\n        if str(e) == "cannot unpack non-iterable NoneType object":\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_postscript_backend_empty_line_bug()\n```\n\nThis test script performs the following steps:\n\n1. **Imports the necessary class**: It imports `Figure` from `matplotlib.figure`.\n2. **Defines the test function**: It encapsulates the test in a function `test_postscript_backend_empty_line_bug`.\n3. **Tries to reproduce the issue**:\n   - Creates a figure and adds a subplot.\n   - Adds an annotation with an empty line.\n   - Saves the figure in PostScript format.\n4. **Handles exceptions to determine the outcome**:\n   - If a `TypeError` with the message "cannot unpack non-iterable NoneType object" is caught, it prints "Issue reproduced".\n   - If no exceptions are raised, it prints "Issue resolved".\n   - If another exception is raised, it prints "Other issues".\n\nRun this script to test whether the issue is reproduced or resolved. If the issue is fixed, it will print "Issue resolved"; otherwise, it will print "Issue reproduced" or "Other issues" depending on the exception encountered.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=8, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib\nfrom matplotlib.figure import Figure\n\ndef test_text_label_with_empty_line() -> None:\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        # ax.set_title(\'\\nLower title\')  # this would cause an error as well\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print(f"Other issues: {e}")\n\ntest_text_label_with_empty_line()\n```\n\nThis test script:\n1. Sets up the necessary imports.\n2. Reproduces the issue described by attempting to save a figure with a multi-line text label containing an empty line.\n3. Prints "Issue reproduced" if the expected `TypeError` with the message "cannot unpack non-iterable NoneType object" is raised.\n4. Prints "Issue resolved" if the figure is saved without any errors.\n5. Prints "Other issues" if any other unexpected exceptions are raised.\n\nBy running this test before and after applying the suggested fix (`if curr_stream:` before line 669 of `backend_ps.py`), you can verify whether the issue has been resolved.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=9, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib\nfrom matplotlib.figure import Figure\n\ndef test_postscript_backend_empty_line_issue():\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        # This line is supposed to reproduce the issue\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_postscript_backend_empty_line_issue()\n```\n\nThis test script incorporates the following:\n1. Necessary imports from `matplotlib`.\n2. Code to reproduce the issue as described in the issue text.\n3. It prints "Issue reproduced" if the specific `TypeError` is raised.\n4. It prints "Issue resolved" if no exceptions occur and the figure saves successfully.\n5. It prints "Other issues" if any other exceptions occur.\n\nThis should help in verifying both the reproduction of the issue and the resolution after applying the fix.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=10, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\nimport traceback\nimport sys\n\ndef test_ps_backend_empty_line_issue():\n    try:\n        # Reproducing the issue described in the issue text\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n\n        try:\n            figure.savefig(\'figure.eps\')\n            print("Issue resolved")\n        except TypeError as e:\n            if \'cannot unpack non-iterable NoneType object\' in str(e):\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n        except Exception:\n            print("Other issues")\n            traceback.print_exc()\n    except Exception:\n        print("Other issues")\n        traceback.print_exc()\n\ntest_ps_backend_empty_line_issue()\n```\n\nThis test script:\n1. Sets up the necessary imports.\n2. Contains code to reproduce the issue described in the issue text.\n3. Prints "Issue reproduced" if the specific `TypeError` related to unpacking a `NoneType` object is encountered.\n4. Prints "Issue resolved" if the figure is saved without encountering the error.\n5. Prints "Other issues" if any other exceptions are raised.\n\nThis test should help in both reproducing the issue and verifying the fix once applied.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=11, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\n\ndef test_ps_backend_empty_line_issue():\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        # This line will cause the issue\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    else:\n        print("Issue resolved")\n\ntest_ps_backend_empty_line_issue()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=12, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\nimport traceback\n\ndef test_postscript_backend_bug():\n    try:\n        # Create a figure and add a subplot\n        figure = Figure()\n        ax = figure.add_subplot(111)\n\n        # Add a text label with an empty line\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n\n        # Try saving the figure as a .eps file\n        figure.savefig(\'figure.eps\')\n        print("Issue resolved")\n\n    except Exception as e:\n        if isinstance(e, TypeError) and "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n            traceback.print_exc()\n\ntest_postscript_backend_bug()\n```\n\nThis test script does the following:\n1. Creates a figure with a subplot and adds a text label containing an empty line.\n2. Attempts to save the figure as a PostScript file (`figure.eps`).\n3. If the `TypeError: cannot unpack non-iterable NoneType object` is raised, it prints "Issue reproduced".\n4. If the figure saves without error, it prints "Issue resolved".\n5. If any other exception occurs, it prints "Other issues" and displays the traceback for further debugging.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=13, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nfrom matplotlib.figure import Figure\n\ndef test_postscript_backend_bug():\n    try:\n        # Create a figure and add a subplot\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        \n        # Add text annotation with a multi-line text label which includes an empty line\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        \n        # Save figure to PostScript format to trigger the issue\n        figure.savefig(\'figure.eps\')\n        \n        # If no error occurs, print "Issue resolved"\n        print("Issue resolved")\n    except TypeError as e:\n        # If TypeError occurs and matches the error description, print "Issue reproduced"\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        # For any other exceptions, print "Other issues"\n        print("Other issues")\n\n# Run the test function\ntest_postscript_backend_bug()\n```\n\nThis test script will:\n\n1. Import the necessary modules (`matplotlib.pyplot` and `matplotlib.figure`).\n2. Create a figure and add a subplot.\n3. Add a multi-line text annotation with an empty line to the subplot.\n4. Attempt to save the figure in PostScript format (`.eps`).\n5. Print "Issue resolved" if the figure is saved without error.\n6. Catch `TypeError` and check if it matches the specific error message described in the issue. Print "Issue reproduced" if it matches.\n7. Print "Other issues" for any other exceptions or if the `TypeError` does not match. \n\nWhen run, this script will help verify if the issue is reproduced or resolved based on the output.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=14, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\n\ndef test_postscript_backend_issue():\n    try:\n        # Create a figure and add a subplot\n        figure = Figure()\n        ax = figure.add_subplot(111)\n\n        # Add a multiline text with an empty line to trigger the bug\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n\n        # Attempt to save the figure using the PostScript backend\n        figure.savefig(\'figure.eps\')\n\n        # If no exception occurs, the issue is resolved\n        print("Issue resolved")\n        \n    except TypeError as e:\n        # Check if the specific TypeError related to the issue occurs\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        # Catch any other exceptions that might occur\n        print("Other issues")\n\ntest_postscript_backend_issue()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=15, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\n\ndef test_matplotlib_ps_backend_empty_line_issue():\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n        print("Issue resolved")\n    except TypeError as e:\n        if str(e) == "cannot unpack non-iterable NoneType object":\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_matplotlib_ps_backend_empty_line_issue()\n```\n\nThis test script does the following:\n1. Imports the necessary modules.\n2. Creates a figure and adds a subplot.\n3. Adds an annotation with an empty line in the text, which is expected to trigger the issue.\n4. Attempts to save the figure as a PostScript file.\n5. Catches specific `TypeError` to determine if the issue is reproduced.\n6. Prints appropriate messages based on whether the issue is reproduced, resolved, or if there are other issues.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=16, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib\nfrom matplotlib.figure import Figure\n\ndef test_postscript_backend_bug():\n    try:\n        # Reproduce the issue\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n\n        # Try saving the figure to PostScript format\n        try:\n            figure.savefig(\'figure.eps\')\n            print("Issue resolved")\n        except TypeError as e:\n            if "cannot unpack non-iterable NoneType object" in str(e):\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n        except Exception as e:\n            print(f"Other issues: {e}")\n\n    except Exception as e:\n        print(f"Other issues: {e}")\n\ntest_postscript_backend_bug()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=17, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\nimport traceback\n\ndef test_ps_backend_empty_line_issue():\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        # ax.set_title(\'\\nLower title\')  # this would cause an error as well\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n        traceback.print_exc()\n        return\n    except Exception as e:\n        print("Other issues")\n        traceback.print_exc()\n        return\n\n    print("Issue resolved")\n\ntest_ps_backend_empty_line_issue()\n```\n\nExplanation:\n1. **Necessary Imports**: The import statements are included at the beginning.\n2. **Code to Reproduce the Issue**: The provided code snippet that causes the issue is included within a function.\n3. **Outcome Handling**:\n    - If the `TypeError` specific to this issue is caught, "Issue reproduced" is printed.\n    - If any other exception is caught, "Other issues" is printed, and the stack trace is shown for further diagnosis.\n4. **Successful Execution**: If no exception is raised and the code runs as expected, "Issue resolved" is printed.\n\nThis test function should help in reproducing the issue and verifying whether a fix has been applied successfully.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=18, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\nimport matplotlib\n\ndef test_postscript_backend_empty_line():\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        # Add a multi-line text label with an empty line (which is expected to cause the issue)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        # Save the figure using the PostScript backend\n        figure.savefig(\'figure.eps\')\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n        return\n    except Exception as e:\n        print("Other issues")\n        return\n\n    print("Issue resolved")\n\ntest_postscript_backend_empty_line()\n```\n\nThis test script:\n1. Imports the necessary modules.\n2. Reproduces the issue described in the provided issue text by creating a figure with a multi-line text label that includes an empty line.\n3. Attempts to save the figure using the PostScript backend.\n4. Catches the specific `TypeError` that indicates the issue has been reproduced and prints "Issue reproduced".\n5. Catches any other exceptions and prints "Other issues".\n6. If no exception is raised, it prints "Issue resolved" indicating the issue has been successfully resolved.\n\nRun this script to verify whether the issue is reproduced or resolved.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=19, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\n\ndef test_postscript_backend_issue():\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n    \n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n    else:\n        print("Issue resolved")\n\ntest_postscript_backend_issue()\n```\n\nThis test script will:\n1. Attempt to reproduce the issue by creating a figure with a `\\n` in the text label and saving it as a PostScript file.\n2. Handle the specific `TypeError` expected from the issue.\n3. Print "Issue reproduced" if the specific `TypeError` is encountered.\n4. Print "Issue resolved" if no exception occurs.\n5. Print "Other issues" if any other exception occurs.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=20, logprobs=None, message=ChatCompletionMessage(content='Certainly! Below is the complete test script based on the issue description provided. This script will help in reproducing the issue and verifying if the issue has been resolved.\n\n```python\nimport matplotlib\nfrom matplotlib.figure import Figure\n\ndef test_text_label_with_empty_line():\n    try:\n        # Create a figure and add a subplot\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        \n        # Annotate with a text label containing an empty line\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        \n        # Try to save the figure with the PostScript backend\n        figure.savefig(\'figure.eps\')\n        \n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\n# Run the test\ntest_text_label_with_empty_line()\n```\n\nExplanation:\n1. **Necessary imports:** The script imports `matplotlib` and `Figure` from `matplotlib.figure`.\n2. **Code to reproduce the issue:** The script creates a figure, adds a subplot, and annotates it with a text label containing an empty line.\n3. **Print statements:** Based on the outcome of attempting to save the figure, the script will print "Issue resolved", "Issue reproduced", or "Other issues".\n4. **Error handling:** The script specifically checks for the `TypeError` with the message "cannot unpack non-iterable NoneType object" to determine if the issue is reproduced. Any other exceptions are categorized as "Other issues".\n\nRunning this script should help you determine if the issue still exists or if it has been resolved in your environment.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=21, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\n\ndef test_matplotlib_ps_backend_issue():\n    try:\n        # Reproduction of the described issue\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues: ", e)\n\ntest_matplotlib_ps_backend_issue()\n```\n\nExplanation:\n1. **Necessary imports**: Only `Figure` is imported as required.\n2. **Code to reproduce the issue**:\n    - A `Figure` object is created.\n    - A subplot is added to the figure.\n    - An annotation with text containing an empty line is added.\n    - The figure is saved as a PostScript (`.eps`) file.\n3. **Outcome validation**:\n    - If a `TypeError` with the message "cannot unpack non-iterable NoneType object" occurs, it prints "Issue reproduced".\n    - If no error occurs, it prints "Issue resolved".\n    - If any other exception occurs, it prints "Other issues".\n\nThis test will check if the issue is present or has been fixed, and will also handle unexpected errors gracefully.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=22, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\nimport matplotlib\n\ndef test_ps_backend_issue():\n    try:\n        # Code to reproduce the issue\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        \n        # Save the figure using the PostScript backend\n        figure.savefig(\'figure.eps\', format=\'eps\')\n        \n        print("Issue resolved")\n    \n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print(f"Other issues: {e}")\n\ntest_ps_backend_issue()\n```\n\nThis test script encapsulates the steps necessary to reproduce the issue described in your provided issue text. It will check if the specific `TypeError` is raised, indicating that the issue is reproduced. If no error is encountered while saving the figure, it will print "Issue resolved". Any other exceptions will result in the output "Other issues".', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=23, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\n\ndef test_multiline_text_label_with_empty_line():\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_multiline_text_label_with_empty_line()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=24, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\nimport matplotlib\n\ndef test_postscript_backend_empty_line_issue():\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        \n        try:\n            figure.savefig(\'figure.eps\')\n            print("Issue resolved")\n        except TypeError as e:\n            if "cannot unpack non-iterable NoneType object" in str(e):\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_postscript_backend_empty_line_issue()\n```\n\nThis test script does the following:\n1. Imports the necessary modules.\n2. Sets up a matplotlib figure with an annotation that contains an empty line.\n3. Attempts to save the figure as an EPS file.\n4. Checks if the specific `TypeError` described in the issue is raised, and prints "Issue reproduced" if it is.\n5. Prints "Issue resolved" if the figure is saved without raising the `TypeError`.\n6. Prints "Other issues" if any other exceptions occur.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=25, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib\nfrom matplotlib.figure import Figure\n\ndef test_postscript_backend_empty_line():\n    try:\n        # Set the backend to PostScript\n        matplotlib.use(\'PS\')\n        \n        figure = Figure()\n        ax = figure.add_subplot(111)\n        # Annotate with a text that has an empty line\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        # Save the figure as .eps file\n        figure.savefig(\'figure.eps\')\n        \n        # If no exception occurs, the issue is resolved\n        print("Issue resolved")\n    except TypeError as e:\n        # Check if the exception is the one we are expecting\n        if str(e) == "cannot unpack non-iterable NoneType object":\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        # Catch any other exceptions\n        print("Other issues:", str(e))\n\ntest_postscript_backend_empty_line()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=26, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\nimport matplotlib\n\ndef test_postscript_backend_empty_line_issue():\n    try:\n        # Setup the figure and axis\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        \n        # Annotate the axis with a text label that has an empty line\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        \n        # Attempt to save the figure using the PostScript backend\n        figure.savefig(\'figure.eps\')\n        \n        # If no error occurs, print "Issue resolved"\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            # If the specific TypeError occurs, print "Issue reproduced"\n            print("Issue reproduced")\n        else:\n            # If another TypeError occurs, print "Other issues"\n            print("Other issues")\n    except Exception as e:\n        # If any other exception occurs, print "Other issues"\n        print("Other issues")\n\ntest_postscript_backend_empty_line_issue()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=27, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\n\ndef test_postscript_backend_issue():\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))  # Multi-line text with empty line\n        \n        # Attempt to save the figure in PostScript format\n        figure.savefig(\'figure.eps\')\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_postscript_backend_issue()\n```\n\nThis test script follows the structure you requested and adheres to the specifics of the issue described. It does the following:\n1. Imports necessary components.\n2. Creates a figure and adds a subplot.\n3. Annotates the subplot with multi-line text containing an empty line.\n4. Attempts to save the figure as a PostScript file.\n5. Catches the specific `TypeError` related to the issue and prints "Issue reproduced" if the error message matches.\n6. Prints "Other issues" if any other exceptions occur.\n7. Prints "Issue resolved" if no exceptions occur during the save operation.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=28, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib\nfrom matplotlib.figure import Figure\n\ndef test_postscript_backend():\n    try:\n        # Set backend to PS to reproduce the issue\n        matplotlib.use(\'PS\')\n\n        # Create a figure and add a subplot\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        \n        # Add annotation with an empty line\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        \n        # Try saving the figure\n        figure.savefig(\'figure.eps\')\n        print("Issue resolved")\n    except TypeError as e:\n        if str(e) == "cannot unpack non-iterable NoneType object":\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print(f"Other issues: {e}")\n\ntest_postscript_backend()\n```\n\n### Explanation:\n1. **Necessary imports**: Import the `matplotlib` module and the `Figure` class from `matplotlib.figure`.\n2. **Reproducing the issue**: \n    - Set the backend to \'PS\' explicitly using `matplotlib.use(\'PS\')` to ensure the PostScript backend is used.\n    - Create a figure and an axis, then add an annotation with an empty line, which is expected to cause the issue.\n    - Attempt to save the figure as `figure.eps`.\n3. **Outcome handling**:\n    - If a `TypeError` with the specific message "cannot unpack non-iterable NoneType object" is raised, print "Issue reproduced".\n    - If no exception occurs, print "Issue resolved".\n    - If any other exception occurs, print "Other issues".\n\nThis test will help identify if the issue described in the provided issue text is still present or if it has been resolved.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=29, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib\nfrom matplotlib.figure import Figure\n\ndef test_postscript_backend_issue():\n    try:\n        # Set the backend to PostScript\n        matplotlib.use(\'PS\')\n\n        # Code to reproduce the issue\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n        \n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_postscript_backend_issue()\n```\n\nThis script sets up a test to reproduce the issue described in the provided issue text. It attempts to save a figure with the PostScript backend that contains a multi-line text label with an empty line. Depending on the outcome, it prints whether the issue is reproduced, resolved, or if there are other issues. This script should help in both reproducing the issue and verifying if it has been fixed.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=30, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib\nfrom matplotlib.figure import Figure\n\ndef test_text_label_empty_line_issue():\n    try:\n        # Create a figure and add a subplot\n        figure = Figure()\n        ax = figure.add_subplot(111)\n\n        # Add an annotation with an empty line\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n\n        # Try to save the figure as a PostScript file\n        figure.savefig(\'figure.eps\')\n        \n        # If no exception is raised, print "Issue resolved"\n        print("Issue resolved")\n    except TypeError as e:\n        # Check if the error is the specific TypeError we are looking for\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        # Catch any other exceptions and print "Other issues"\n        print("Other issues")\n\ntest_text_label_empty_line_issue()\n```\n\nThis script:\n1. Imports the necessary `matplotlib` modules.\n2. Contains the code to reproduce the issue described in the issue text.\n3. Prints "Issue reproduced" if the specific `TypeError` is encountered.\n4. Prints "Issue resolved" if no exception is raised, indicating the issue has been fixed.\n5. Prints "Other issues" if any other exceptions are raised.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=31, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\n\ndef test_postscript_backend_empty_line_issue():\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n            return\n        else:\n            print("Other issues")\n            return\n    except Exception as e:\n        print("Other issues")\n        return\n\n    print("Issue resolved")\n\ntest_postscript_backend_empty_line_issue()\n```\n\nThis script performs the following:\n1. Imports the necessary `Figure` class from `matplotlib.figure`.\n2. Defines a function `test_postscript_backend_empty_line_issue` that contains the code to reproduce the issue.\n3. Attempts to save a figure with a multiline text label containing an empty line, using the PostScript backend.\n4. Catches the `TypeError` and checks if it matches the specific error message described in the issue.\n5. Prints "Issue reproduced" if the specific error message is encountered.\n6. Catches any other exceptions and prints "Other issues".\n7. Prints "Issue resolved" if no exceptions are encountered, indicating the issue has been fixed.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=32, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\nimport matplotlib\n\ndef test_savefig_with_empty_line():\n    try:\n        # Reproduce the issue\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n            return\n        else:\n            print("Other issues")\n            return\n    except Exception as e:\n        print(f"Other issues: {str(e)}")\n        return\n    \n    print("Issue resolved")\n\ntest_savefig_with_empty_line()\n```\n\nThis test script performs the following steps:\n1. Imports the necessary modules.\n2. Defines a function `test_savefig_with_empty_line` which attempts to reproduce the issue.\n3. Inside the function, it creates a figure, adds a subplot, and annotates it with a string containing an empty line.\n4. Attempts to save the figure as an EPS file.\n5. Catches and identifies the specific `TypeError` described in the issue text.\n6. Prints "Issue reproduced" if the specific error is encountered.\n7. Prints "Other issues" if any other exceptions are encountered.\n8. Prints "Issue resolved" if no exceptions occur, indicating the issue has been resolved.\n\nRun this test script to both reproduce the issue and verify if it has been fixed.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=33, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib\nfrom matplotlib.figure import Figure\n\ndef test_ps_backend_bug():\n    try:\n        matplotlib.use(\'PS\')  # Use the PostScript backend\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        \n        figure.savefig(\'figure.eps\')\n        \n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n        print(str(e))\n\ntest_ps_backend_bug()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=34, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\n\ndef test_ps_backend_text_label_empty_line():\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_ps_backend_text_label_empty_line()\n```\n\nThis test script performs the following steps:\n1. Imports the necessary `Figure` class from `matplotlib.figure`.\n2. Defines a function `test_ps_backend_text_label_empty_line` to encapsulate the test logic.\n3. Within the function, tries to reproduce the issue by creating a figure, adding a subplot, annotating with a text label containing an empty line, and saving the figure as a PostScript file (`figure.eps`).\n4. Catches the specific `TypeError` that is expected to be raised if the issue is present. It checks if the error message matches the known issue, printing "Issue reproduced" if so.\n5. If the figure is saved without raising the expected error, it prints "Issue resolved".\n6. Catches any other exceptions and prints "Other issues" if a different error occurs.\n\nThis script helps to verify if the issue is present or has been resolved.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=35, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\n\ndef test_postscript_backend_empty_line_issue():\n    try:\n        from matplotlib.figure import Figure\n\n        # Code to reproduce the issue\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_postscript_backend_empty_line_issue()\n```\n\nThis script will attempt to reproduce the issue described in the provided issue text. If the issue is reproduced, it will print "Issue reproduced". If the issue does not occur and the figure is saved successfully, it will print "Issue resolved". If any other issues arise, it will print "Other issues".', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=36, logprobs=None, message=ChatCompletionMessage(content='```python\nfrom matplotlib.figure import Figure\n\ndef test_ps_backend_empty_line_issue():\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        # This line is expected to cause the issue\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues:", str(e))\n\ntest_ps_backend_empty_line_issue()\n```\n\nThis test script follows the given structure and includes the necessary imports, code to reproduce the issue described in the issue text, and print statements to indicate whether the issue is reproduced, resolved, or if there are other issues. Running this script should help in verifying if the issue persists or if it has been fixed.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=37, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib\nfrom matplotlib.figure import Figure\n\ndef test_ps_backend_empty_line_issue():\n    # Code to reproduce the issue\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_ps_backend_empty_line_issue()\n```\n\nThis test script will attempt to reproduce the issue by saving a figure containing a multi-line text label with an empty line using the PostScript backend. If the specific `TypeError` is encountered, it will print "Issue reproduced". If the figure is saved without errors, it will print "Issue resolved". Any other exceptions will be caught, and it will print "Other issues".', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=38, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib\nfrom matplotlib.figure import Figure\n\ndef test_text_label_empty_line_postscript():\n    try:\n        figure = Figure()\n        ax = figure.add_subplot(111)\n        ax.annotate(text=\'\\nLower label\', xy=(0, 0))\n        figure.savefig(\'figure.eps\')\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot unpack non-iterable NoneType object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_text_label_empty_line_postscript()\n```\n\nThis test script does the following:\n1. Imports the necessary matplotlib module and the `Figure` class.\n2. Creates a figure and adds a subplot.\n3. Adds an annotation with a text label containing an empty line.\n4. Attempts to save the figure as a PostScript file (`figure.eps`).\n5. Catches the `TypeError` if it occurs and prints "Issue reproduced".\n6. Prints "Issue resolved" if the figure is saved without any errors.\n7. Prints "Other issues" if any other exceptions occur.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None))], created=1746299721, model='gpt-4o-2024-05-13', object='chat.completion', service_tier='default', system_fingerprint='fp_b70b7e9c76', usage=CompletionUsage(completion_tokens=10088, prompt_tokens=1616, total_tokens=11704, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))
2025-05-03 14:15:57,525 - INFO - raw output:
```python
from matplotlib.figure import Figure

def test_postscript_backend_empty_line_issue():
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
        return
    except Exception as e:
        print("Other issues")
        return

    print("Issue resolved")

test_postscript_backend_empty_line_issue()
```

This test script does the following:
1. Imports the necessary `Figure` class from `matplotlib.figure`.
2. Reproduces the issue by creating a figure, adding a subplot, and annotating it with a text label that contains an empty line.
3. Attempts to save the figure in PostScript format.
4. Catches the specific `TypeError` that indicates the issue has been reproduced and prints "Issue reproduced".
5. Catches any other exceptions and prints "Other issues".
6. If no exceptions are raised, it prints "Issue resolved".

This script can be used to both reproduce the issue and verify if the issue has been fixed.
2025-05-03 14:15:57,526 - INFO - raw output:
Sure, here's the complete test script that follows the instructions provided:

```python
import matplotlib
from matplotlib.figure import Figure

def test_text_label_empty_line():
    try:
        # Create a figure and add a subplot with an annotation containing an empty line
        figure = Figure()
        ax = figure.add_subplot(111)
        # This line will trigger the issue
        ax.annotate(text='\nLower label', xy=(0, 0))
        
        # Try saving the figure using the PostScript backend
        figure.savefig('figure.eps', format='eps')

        # If no exception is raised, print "Issue resolved"
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            # If the specific error is caught, print "Issue reproduced"
            print("Issue reproduced")
        else:
            # If other TypeErrors are caught, they indicate other issues
            print("Other issues")
    except Exception as e:
        # If any other exception type is caught, print "Other issues"
        print("Other issues")

# Run the test
test_text_label_empty_line()
```

This script:
1. Imports the necessary modules.
2. Reproduces the issue by creating a figure and adding a subplot with an annotation containing an empty line.
3. Attempts to save the figure using the PostScript backend.
4. Catches the specific `TypeError` and prints "Issue reproduced" if the error matches the description.
5. Prints "Issue resolved" if no exception occurs.
6. Prints "Other issues" if any other exceptions are raised.
2025-05-03 14:15:57,526 - INFO - raw output:
```python
import matplotlib.pyplot as plt

def test_issue_reproduction():
    try:
        # Create a figure and add a subplot
        figure = plt.figure()
        ax = figure.add_subplot(111)

        # Add an annotation with a multiline text label containing an empty line
        ax.annotate(text='\nLower label', xy=(0, 0))

        # Try to save the figure as EPS
        figure.savefig('figure.eps')

        # If no error occurs, print "Issue resolved"
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            # If the specific error occurs, print "Issue reproduced"
            print("Issue reproduced")
        else:
            # If any other TypeError occurs, print "Other issues"
            print("Other issues")
    except Exception as e:
        # If any other exception occurs, print "Other issues"
        print("Other issues")

# Run the test
test_issue_reproduction()
```
2025-05-03 14:15:57,526 - INFO - raw output:
Here's the complete test to reproduce and verify the issue described in the provided issue text:

```python
import matplotlib
from matplotlib.figure import Figure
import traceback

def test_postscript_backend_bug():
    try:
        # Step 1: Set up the figure and annotate with a multi-line text label containing an empty line
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))

        # Step 2: Save the figure using the PostScript backend
        figure.savefig('figure.eps')

        # If no error occurs, the issue is considered resolved
        print("Issue resolved")

    except TypeError as e:
        # Check if the specific TypeError related to the issue is raised
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
            print(traceback.format_exc())
    
    except Exception as e:
        # Any other exceptions are considered as other issues
        print("Other issues")
        print(traceback.format_exc())

test_postscript_backend_bug()
```

Explanation:
1. **Necessary imports**: Import the necessary modules from `matplotlib` and `traceback` for handling exceptions.
2. **Code to reproduce the issue**: Create a figure and add a multi-line text annotation with an empty line, then save the figure as `figure.eps` using the PostScript backend.
3. **Print outcomes**:
   - Print "Issue resolved" if the figure is saved without any errors.
   - Print "Issue reproduced" if the specific `TypeError` related to the issue is raised.
   - Print "Other issues" for any other exceptions and print the traceback for further debugging.

This test will help you verify whether the specified issue has been resolved or if it still persists.
2025-05-03 14:15:57,526 - INFO - raw output:
```python
from matplotlib.figure import Figure
import traceback

def test_postscript_backend_issue():
    try:
        # Create a figure and axis
        figure = Figure()
        ax = figure.add_subplot(111)
        # Add a multi-line text label with an empty line
        ax.annotate(text='\nLower label', xy=(0, 0))
        # Attempt to save the figure as a PostScript file
        figure.savefig('figure.eps')
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
            traceback.print_exc()
    except Exception as e:
        print("Other issues")
        traceback.print_exc()

test_postscript_backend_issue()
```

This script will:
1. Import necessary modules.
2. Create a figure and axis, then add a multi-line text label containing an empty line.
3. Attempt to save the figure as a PostScript file.
4. Print "Issue resolved" if the figure is saved without error.
5. Print "Issue reproduced" if the specific `TypeError` is encountered.
6. Print "Other issues" if any other exceptions occur, and print the traceback for debugging.
2025-05-03 14:15:57,526 - INFO - raw output:
```python
import matplotlib
from matplotlib.figure import Figure

def test_postscript_backend_issue():
    # Set the backend to PostScript
    matplotlib.use('PS')

    try:
        # Create a figure and add a subplot
        figure = Figure()
        ax = figure.add_subplot(111)

        # Add annotation with an empty line
        ax.annotate(text='\nLower label', xy=(0, 0))

        # Try to save the figure
        figure.savefig('figure.eps')

        print("Issue resolved")

    except TypeError as e:
        # Check if the error is the specific TypeError described in the issue
        if 'cannot unpack non-iterable NoneType object' in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print(f"Other issues: {e}")

test_postscript_backend_issue()
```

This script:
1. Imports the necessary modules.
2. Sets the backend to PostScript.
3. Creates a figure and adds a subplot.
4. Adds an annotation containing an empty line.
5. Attempts to save the figure to a PostScript file.
6. Prints "Issue resolved" if no exception occurs, indicating that the issue has been fixed.
7. Prints "Issue reproduced" if the specific `TypeError` occurs, indicating the issue is still present.
8. Prints "Other issues" if any other exception occurs.
2025-05-03 14:15:57,526 - INFO - raw output:
```python
from matplotlib.figure import Figure

def test_postscript_backend_issue():
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        # ax.set_title('\nLower title')  # this would cause an error as well
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception:
        print("Other issues")

test_postscript_backend_issue()
```

This test script does the following:
1. Imports the necessary `Figure` class from `matplotlib.figure`.
2. Creates a figure and adds a subplot to it.
3. Annotates the subplot with a text label that contains an empty line.
4. Attempts to save the figure as an EPS file.
5. If the specific `TypeError` is raised, it prints "Issue reproduced".
6. If no error occurs, it prints "Issue resolved".
7. If any other error occurs, it prints "Other issues".
2025-05-03 14:15:57,526 - INFO - raw output:
```python
import matplotlib.pyplot as plt
from matplotlib.figure import Figure

def test_postscript_backend_empty_line():
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
        return
    except Exception as e:
        print("Other issues")
        return

    print("Issue resolved")

test_postscript_backend_empty_line()
```

Explanation:
1. **Necessary imports**: The script begins with importing `matplotlib.pyplot` and `Figure` from `matplotlib.figure`.
2. **Code to reproduce the issue**: A new figure is created, and an annotation with a multi-line text label containing an empty line is added. The figure is then saved using the PostScript backend.
3. **Outcome checks**:
   - If the `TypeError` with the specific message indicating the unpacking issue is raised, "Issue reproduced" is printed.
   - If any other exception arises, "Other issues" is printed.
   - If no exceptions occur and the file saves correctly, "Issue resolved" is printed.
2025-05-03 14:15:57,526 - INFO - raw output:
```python
from matplotlib.figure import Figure

def test_postscript_backend_empty_line_bug():
    try:
        # Step 1: Reproduce the issue
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
        print("Issue resolved")
    except TypeError as e:
        if str(e) == "cannot unpack non-iterable NoneType object":
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_postscript_backend_empty_line_bug()
```

This test script performs the following steps:

1. **Imports the necessary class**: It imports `Figure` from `matplotlib.figure`.
2. **Defines the test function**: It encapsulates the test in a function `test_postscript_backend_empty_line_bug`.
3. **Tries to reproduce the issue**:
   - Creates a figure and adds a subplot.
   - Adds an annotation with an empty line.
   - Saves the figure in PostScript format.
4. **Handles exceptions to determine the outcome**:
   - If a `TypeError` with the message "cannot unpack non-iterable NoneType object" is caught, it prints "Issue reproduced".
   - If no exceptions are raised, it prints "Issue resolved".
   - If another exception is raised, it prints "Other issues".

Run this script to test whether the issue is reproduced or resolved. If the issue is fixed, it will print "Issue resolved"; otherwise, it will print "Issue reproduced" or "Other issues" depending on the exception encountered.
2025-05-03 14:15:57,526 - INFO - raw output:
```python
import matplotlib
from matplotlib.figure import Figure

def test_text_label_with_empty_line() -> None:
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        # ax.set_title('\nLower title')  # this would cause an error as well
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print(f"Other issues: {e}")

test_text_label_with_empty_line()
```

This test script:
1. Sets up the necessary imports.
2. Reproduces the issue described by attempting to save a figure with a multi-line text label containing an empty line.
3. Prints "Issue reproduced" if the expected `TypeError` with the message "cannot unpack non-iterable NoneType object" is raised.
4. Prints "Issue resolved" if the figure is saved without any errors.
5. Prints "Other issues" if any other unexpected exceptions are raised.

By running this test before and after applying the suggested fix (`if curr_stream:` before line 669 of `backend_ps.py`), you can verify whether the issue has been resolved.
2025-05-03 14:15:57,527 - INFO - raw output:
```python
import matplotlib
from matplotlib.figure import Figure

def test_postscript_backend_empty_line_issue():
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        # This line is supposed to reproduce the issue
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_postscript_backend_empty_line_issue()
```

This test script incorporates the following:
1. Necessary imports from `matplotlib`.
2. Code to reproduce the issue as described in the issue text.
3. It prints "Issue reproduced" if the specific `TypeError` is raised.
4. It prints "Issue resolved" if no exceptions occur and the figure saves successfully.
5. It prints "Other issues" if any other exceptions occur.

This should help in verifying both the reproduction of the issue and the resolution after applying the fix.
2025-05-03 14:15:57,527 - INFO - raw output:
```python
from matplotlib.figure import Figure
import traceback
import sys

def test_ps_backend_empty_line_issue():
    try:
        # Reproducing the issue described in the issue text
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))

        try:
            figure.savefig('figure.eps')
            print("Issue resolved")
        except TypeError as e:
            if 'cannot unpack non-iterable NoneType object' in str(e):
                print("Issue reproduced")
            else:
                print("Other issues")
        except Exception:
            print("Other issues")
            traceback.print_exc()
    except Exception:
        print("Other issues")
        traceback.print_exc()

test_ps_backend_empty_line_issue()
```

This test script:
1. Sets up the necessary imports.
2. Contains code to reproduce the issue described in the issue text.
3. Prints "Issue reproduced" if the specific `TypeError` related to unpacking a `NoneType` object is encountered.
4. Prints "Issue resolved" if the figure is saved without encountering the error.
5. Prints "Other issues" if any other exceptions are raised.

This test should help in both reproducing the issue and verifying the fix once applied.
2025-05-03 14:15:57,527 - INFO - raw output:
```python
from matplotlib.figure import Figure

def test_ps_backend_empty_line_issue():
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        # This line will cause the issue
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    else:
        print("Issue resolved")

test_ps_backend_empty_line_issue()
```
2025-05-03 14:15:57,527 - INFO - raw output:
```python
from matplotlib.figure import Figure
import traceback

def test_postscript_backend_bug():
    try:
        # Create a figure and add a subplot
        figure = Figure()
        ax = figure.add_subplot(111)

        # Add a text label with an empty line
        ax.annotate(text='\nLower label', xy=(0, 0))

        # Try saving the figure as a .eps file
        figure.savefig('figure.eps')
        print("Issue resolved")

    except Exception as e:
        if isinstance(e, TypeError) and "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
            traceback.print_exc()

test_postscript_backend_bug()
```

This test script does the following:
1. Creates a figure with a subplot and adds a text label containing an empty line.
2. Attempts to save the figure as a PostScript file (`figure.eps`).
3. If the `TypeError: cannot unpack non-iterable NoneType object` is raised, it prints "Issue reproduced".
4. If the figure saves without error, it prints "Issue resolved".
5. If any other exception occurs, it prints "Other issues" and displays the traceback for further debugging.
2025-05-03 14:15:57,527 - INFO - raw output:
```python
import matplotlib.pyplot as plt
from matplotlib.figure import Figure

def test_postscript_backend_bug():
    try:
        # Create a figure and add a subplot
        figure = Figure()
        ax = figure.add_subplot(111)
        
        # Add text annotation with a multi-line text label which includes an empty line
        ax.annotate(text='\nLower label', xy=(0, 0))
        
        # Save figure to PostScript format to trigger the issue
        figure.savefig('figure.eps')
        
        # If no error occurs, print "Issue resolved"
        print("Issue resolved")
    except TypeError as e:
        # If TypeError occurs and matches the error description, print "Issue reproduced"
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        # For any other exceptions, print "Other issues"
        print("Other issues")

# Run the test function
test_postscript_backend_bug()
```

This test script will:

1. Import the necessary modules (`matplotlib.pyplot` and `matplotlib.figure`).
2. Create a figure and add a subplot.
3. Add a multi-line text annotation with an empty line to the subplot.
4. Attempt to save the figure in PostScript format (`.eps`).
5. Print "Issue resolved" if the figure is saved without error.
6. Catch `TypeError` and check if it matches the specific error message described in the issue. Print "Issue reproduced" if it matches.
7. Print "Other issues" for any other exceptions or if the `TypeError` does not match. 

When run, this script will help verify if the issue is reproduced or resolved based on the output.
2025-05-03 14:15:57,527 - INFO - raw output:
```python
from matplotlib.figure import Figure

def test_postscript_backend_issue():
    try:
        # Create a figure and add a subplot
        figure = Figure()
        ax = figure.add_subplot(111)

        # Add a multiline text with an empty line to trigger the bug
        ax.annotate(text='\nLower label', xy=(0, 0))

        # Attempt to save the figure using the PostScript backend
        figure.savefig('figure.eps')

        # If no exception occurs, the issue is resolved
        print("Issue resolved")
        
    except TypeError as e:
        # Check if the specific TypeError related to the issue occurs
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        # Catch any other exceptions that might occur
        print("Other issues")

test_postscript_backend_issue()
```
2025-05-03 14:15:57,527 - INFO - raw output:
```python
from matplotlib.figure import Figure

def test_matplotlib_ps_backend_empty_line_issue():
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
        print("Issue resolved")
    except TypeError as e:
        if str(e) == "cannot unpack non-iterable NoneType object":
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_matplotlib_ps_backend_empty_line_issue()
```

This test script does the following:
1. Imports the necessary modules.
2. Creates a figure and adds a subplot.
3. Adds an annotation with an empty line in the text, which is expected to trigger the issue.
4. Attempts to save the figure as a PostScript file.
5. Catches specific `TypeError` to determine if the issue is reproduced.
6. Prints appropriate messages based on whether the issue is reproduced, resolved, or if there are other issues.
2025-05-03 14:15:57,527 - INFO - raw output:
```python
import matplotlib
from matplotlib.figure import Figure

def test_postscript_backend_bug():
    try:
        # Reproduce the issue
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))

        # Try saving the figure to PostScript format
        try:
            figure.savefig('figure.eps')
            print("Issue resolved")
        except TypeError as e:
            if "cannot unpack non-iterable NoneType object" in str(e):
                print("Issue reproduced")
            else:
                print("Other issues")
        except Exception as e:
            print(f"Other issues: {e}")

    except Exception as e:
        print(f"Other issues: {e}")

test_postscript_backend_bug()
```
2025-05-03 14:15:57,527 - INFO - raw output:
```python
from matplotlib.figure import Figure
import traceback

def test_ps_backend_empty_line_issue():
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        # ax.set_title('\nLower title')  # this would cause an error as well
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
        traceback.print_exc()
        return
    except Exception as e:
        print("Other issues")
        traceback.print_exc()
        return

    print("Issue resolved")

test_ps_backend_empty_line_issue()
```

Explanation:
1. **Necessary Imports**: The import statements are included at the beginning.
2. **Code to Reproduce the Issue**: The provided code snippet that causes the issue is included within a function.
3. **Outcome Handling**:
    - If the `TypeError` specific to this issue is caught, "Issue reproduced" is printed.
    - If any other exception is caught, "Other issues" is printed, and the stack trace is shown for further diagnosis.
4. **Successful Execution**: If no exception is raised and the code runs as expected, "Issue resolved" is printed.

This test function should help in reproducing the issue and verifying whether a fix has been applied successfully.
2025-05-03 14:15:57,527 - INFO - raw output:
```python
from matplotlib.figure import Figure
import matplotlib

def test_postscript_backend_empty_line():
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        # Add a multi-line text label with an empty line (which is expected to cause the issue)
        ax.annotate(text='\nLower label', xy=(0, 0))
        # Save the figure using the PostScript backend
        figure.savefig('figure.eps')
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
        return
    except Exception as e:
        print("Other issues")
        return

    print("Issue resolved")

test_postscript_backend_empty_line()
```

This test script:
1. Imports the necessary modules.
2. Reproduces the issue described in the provided issue text by creating a figure with a multi-line text label that includes an empty line.
3. Attempts to save the figure using the PostScript backend.
4. Catches the specific `TypeError` that indicates the issue has been reproduced and prints "Issue reproduced".
5. Catches any other exceptions and prints "Other issues".
6. If no exception is raised, it prints "Issue resolved" indicating the issue has been successfully resolved.

Run this script to verify whether the issue is reproduced or resolved.
2025-05-03 14:15:57,527 - INFO - raw output:
```python
from matplotlib.figure import Figure

def test_postscript_backend_issue():
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
    
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")
    else:
        print("Issue resolved")

test_postscript_backend_issue()
```

This test script will:
1. Attempt to reproduce the issue by creating a figure with a `\n` in the text label and saving it as a PostScript file.
2. Handle the specific `TypeError` expected from the issue.
3. Print "Issue reproduced" if the specific `TypeError` is encountered.
4. Print "Issue resolved" if no exception occurs.
5. Print "Other issues" if any other exception occurs.
2025-05-03 14:15:57,527 - INFO - raw output:
Certainly! Below is the complete test script based on the issue description provided. This script will help in reproducing the issue and verifying if the issue has been resolved.

```python
import matplotlib
from matplotlib.figure import Figure

def test_text_label_with_empty_line():
    try:
        # Create a figure and add a subplot
        figure = Figure()
        ax = figure.add_subplot(111)
        
        # Annotate with a text label containing an empty line
        ax.annotate(text='\nLower label', xy=(0, 0))
        
        # Try to save the figure with the PostScript backend
        figure.savefig('figure.eps')
        
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

# Run the test
test_text_label_with_empty_line()
```

Explanation:
1. **Necessary imports:** The script imports `matplotlib` and `Figure` from `matplotlib.figure`.
2. **Code to reproduce the issue:** The script creates a figure, adds a subplot, and annotates it with a text label containing an empty line.
3. **Print statements:** Based on the outcome of attempting to save the figure, the script will print "Issue resolved", "Issue reproduced", or "Other issues".
4. **Error handling:** The script specifically checks for the `TypeError` with the message "cannot unpack non-iterable NoneType object" to determine if the issue is reproduced. Any other exceptions are categorized as "Other issues".

Running this script should help you determine if the issue still exists or if it has been resolved in your environment.
2025-05-03 14:15:57,527 - INFO - raw output:
```python
from matplotlib.figure import Figure

def test_matplotlib_ps_backend_issue():
    try:
        # Reproduction of the described issue
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues: ", e)

test_matplotlib_ps_backend_issue()
```

Explanation:
1. **Necessary imports**: Only `Figure` is imported as required.
2. **Code to reproduce the issue**:
    - A `Figure` object is created.
    - A subplot is added to the figure.
    - An annotation with text containing an empty line is added.
    - The figure is saved as a PostScript (`.eps`) file.
3. **Outcome validation**:
    - If a `TypeError` with the message "cannot unpack non-iterable NoneType object" occurs, it prints "Issue reproduced".
    - If no error occurs, it prints "Issue resolved".
    - If any other exception occurs, it prints "Other issues".

This test will check if the issue is present or has been fixed, and will also handle unexpected errors gracefully.
2025-05-03 14:15:57,528 - INFO - raw output:
```python
from matplotlib.figure import Figure
import matplotlib

def test_ps_backend_issue():
    try:
        # Code to reproduce the issue
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        
        # Save the figure using the PostScript backend
        figure.savefig('figure.eps', format='eps')
        
        print("Issue resolved")
    
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print(f"Other issues: {e}")

test_ps_backend_issue()
```

This test script encapsulates the steps necessary to reproduce the issue described in your provided issue text. It will check if the specific `TypeError` is raised, indicating that the issue is reproduced. If no error is encountered while saving the figure, it will print "Issue resolved". Any other exceptions will result in the output "Other issues".
2025-05-03 14:15:57,528 - INFO - raw output:
```python
from matplotlib.figure import Figure

def test_multiline_text_label_with_empty_line():
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_multiline_text_label_with_empty_line()
```
2025-05-03 14:15:57,528 - INFO - raw output:
```python
from matplotlib.figure import Figure
import matplotlib

def test_postscript_backend_empty_line_issue():
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        
        try:
            figure.savefig('figure.eps')
            print("Issue resolved")
        except TypeError as e:
            if "cannot unpack non-iterable NoneType object" in str(e):
                print("Issue reproduced")
            else:
                print("Other issues")
    except Exception as e:
        print("Other issues")

test_postscript_backend_empty_line_issue()
```

This test script does the following:
1. Imports the necessary modules.
2. Sets up a matplotlib figure with an annotation that contains an empty line.
3. Attempts to save the figure as an EPS file.
4. Checks if the specific `TypeError` described in the issue is raised, and prints "Issue reproduced" if it is.
5. Prints "Issue resolved" if the figure is saved without raising the `TypeError`.
6. Prints "Other issues" if any other exceptions occur.
2025-05-03 14:15:57,528 - INFO - raw output:
```python
import matplotlib
from matplotlib.figure import Figure

def test_postscript_backend_empty_line():
    try:
        # Set the backend to PostScript
        matplotlib.use('PS')
        
        figure = Figure()
        ax = figure.add_subplot(111)
        # Annotate with a text that has an empty line
        ax.annotate(text='\nLower label', xy=(0, 0))
        # Save the figure as .eps file
        figure.savefig('figure.eps')
        
        # If no exception occurs, the issue is resolved
        print("Issue resolved")
    except TypeError as e:
        # Check if the exception is the one we are expecting
        if str(e) == "cannot unpack non-iterable NoneType object":
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        # Catch any other exceptions
        print("Other issues:", str(e))

test_postscript_backend_empty_line()
```
2025-05-03 14:15:57,528 - INFO - raw output:
```python
from matplotlib.figure import Figure
import matplotlib

def test_postscript_backend_empty_line_issue():
    try:
        # Setup the figure and axis
        figure = Figure()
        ax = figure.add_subplot(111)
        
        # Annotate the axis with a text label that has an empty line
        ax.annotate(text='\nLower label', xy=(0, 0))
        
        # Attempt to save the figure using the PostScript backend
        figure.savefig('figure.eps')
        
        # If no error occurs, print "Issue resolved"
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            # If the specific TypeError occurs, print "Issue reproduced"
            print("Issue reproduced")
        else:
            # If another TypeError occurs, print "Other issues"
            print("Other issues")
    except Exception as e:
        # If any other exception occurs, print "Other issues"
        print("Other issues")

test_postscript_backend_empty_line_issue()
```
2025-05-03 14:15:57,528 - INFO - raw output:
```python
from matplotlib.figure import Figure

def test_postscript_backend_issue():
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))  # Multi-line text with empty line
        
        # Attempt to save the figure in PostScript format
        figure.savefig('figure.eps')
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_postscript_backend_issue()
```

This test script follows the structure you requested and adheres to the specifics of the issue described. It does the following:
1. Imports necessary components.
2. Creates a figure and adds a subplot.
3. Annotates the subplot with multi-line text containing an empty line.
4. Attempts to save the figure as a PostScript file.
5. Catches the specific `TypeError` related to the issue and prints "Issue reproduced" if the error message matches.
6. Prints "Other issues" if any other exceptions occur.
7. Prints "Issue resolved" if no exceptions occur during the save operation.
2025-05-03 14:15:57,528 - INFO - raw output:
```python
import matplotlib
from matplotlib.figure import Figure

def test_postscript_backend():
    try:
        # Set backend to PS to reproduce the issue
        matplotlib.use('PS')

        # Create a figure and add a subplot
        figure = Figure()
        ax = figure.add_subplot(111)
        
        # Add annotation with an empty line
        ax.annotate(text='\nLower label', xy=(0, 0))
        
        # Try saving the figure
        figure.savefig('figure.eps')
        print("Issue resolved")
    except TypeError as e:
        if str(e) == "cannot unpack non-iterable NoneType object":
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print(f"Other issues: {e}")

test_postscript_backend()
```

### Explanation:
1. **Necessary imports**: Import the `matplotlib` module and the `Figure` class from `matplotlib.figure`.
2. **Reproducing the issue**: 
    - Set the backend to 'PS' explicitly using `matplotlib.use('PS')` to ensure the PostScript backend is used.
    - Create a figure and an axis, then add an annotation with an empty line, which is expected to cause the issue.
    - Attempt to save the figure as `figure.eps`.
3. **Outcome handling**:
    - If a `TypeError` with the specific message "cannot unpack non-iterable NoneType object" is raised, print "Issue reproduced".
    - If no exception occurs, print "Issue resolved".
    - If any other exception occurs, print "Other issues".

This test will help identify if the issue described in the provided issue text is still present or if it has been resolved.
2025-05-03 14:15:57,528 - INFO - raw output:
```python
import matplotlib
from matplotlib.figure import Figure

def test_postscript_backend_issue():
    try:
        # Set the backend to PostScript
        matplotlib.use('PS')

        # Code to reproduce the issue
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
        
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_postscript_backend_issue()
```

This script sets up a test to reproduce the issue described in the provided issue text. It attempts to save a figure with the PostScript backend that contains a multi-line text label with an empty line. Depending on the outcome, it prints whether the issue is reproduced, resolved, or if there are other issues. This script should help in both reproducing the issue and verifying if it has been fixed.
2025-05-03 14:15:57,528 - INFO - raw output:
```python
import matplotlib
from matplotlib.figure import Figure

def test_text_label_empty_line_issue():
    try:
        # Create a figure and add a subplot
        figure = Figure()
        ax = figure.add_subplot(111)

        # Add an annotation with an empty line
        ax.annotate(text='\nLower label', xy=(0, 0))

        # Try to save the figure as a PostScript file
        figure.savefig('figure.eps')
        
        # If no exception is raised, print "Issue resolved"
        print("Issue resolved")
    except TypeError as e:
        # Check if the error is the specific TypeError we are looking for
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        # Catch any other exceptions and print "Other issues"
        print("Other issues")

test_text_label_empty_line_issue()
```

This script:
1. Imports the necessary `matplotlib` modules.
2. Contains the code to reproduce the issue described in the issue text.
3. Prints "Issue reproduced" if the specific `TypeError` is encountered.
4. Prints "Issue resolved" if no exception is raised, indicating the issue has been fixed.
5. Prints "Other issues" if any other exceptions are raised.
2025-05-03 14:15:57,528 - INFO - raw output:
```python
from matplotlib.figure import Figure

def test_postscript_backend_empty_line_issue():
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')

    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
            return
        else:
            print("Other issues")
            return
    except Exception as e:
        print("Other issues")
        return

    print("Issue resolved")

test_postscript_backend_empty_line_issue()
```

This script performs the following:
1. Imports the necessary `Figure` class from `matplotlib.figure`.
2. Defines a function `test_postscript_backend_empty_line_issue` that contains the code to reproduce the issue.
3. Attempts to save a figure with a multiline text label containing an empty line, using the PostScript backend.
4. Catches the `TypeError` and checks if it matches the specific error message described in the issue.
5. Prints "Issue reproduced" if the specific error message is encountered.
6. Catches any other exceptions and prints "Other issues".
7. Prints "Issue resolved" if no exceptions are encountered, indicating the issue has been fixed.
2025-05-03 14:15:57,528 - INFO - raw output:
```python
from matplotlib.figure import Figure
import matplotlib

def test_savefig_with_empty_line():
    try:
        # Reproduce the issue
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
            return
        else:
            print("Other issues")
            return
    except Exception as e:
        print(f"Other issues: {str(e)}")
        return
    
    print("Issue resolved")

test_savefig_with_empty_line()
```

This test script performs the following steps:
1. Imports the necessary modules.
2. Defines a function `test_savefig_with_empty_line` which attempts to reproduce the issue.
3. Inside the function, it creates a figure, adds a subplot, and annotates it with a string containing an empty line.
4. Attempts to save the figure as an EPS file.
5. Catches and identifies the specific `TypeError` described in the issue text.
6. Prints "Issue reproduced" if the specific error is encountered.
7. Prints "Other issues" if any other exceptions are encountered.
8. Prints "Issue resolved" if no exceptions occur, indicating the issue has been resolved.

Run this test script to both reproduce the issue and verify if it has been fixed.
2025-05-03 14:15:57,528 - INFO - raw output:
```python
import matplotlib
from matplotlib.figure import Figure

def test_ps_backend_bug():
    try:
        matplotlib.use('PS')  # Use the PostScript backend
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        
        figure.savefig('figure.eps')
        
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")
        print(str(e))

test_ps_backend_bug()
```
2025-05-03 14:15:57,528 - INFO - raw output:
```python
from matplotlib.figure import Figure

def test_ps_backend_text_label_empty_line():
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_ps_backend_text_label_empty_line()
```

This test script performs the following steps:
1. Imports the necessary `Figure` class from `matplotlib.figure`.
2. Defines a function `test_ps_backend_text_label_empty_line` to encapsulate the test logic.
3. Within the function, tries to reproduce the issue by creating a figure, adding a subplot, annotating with a text label containing an empty line, and saving the figure as a PostScript file (`figure.eps`).
4. Catches the specific `TypeError` that is expected to be raised if the issue is present. It checks if the error message matches the known issue, printing "Issue reproduced" if so.
5. If the figure is saved without raising the expected error, it prints "Issue resolved".
6. Catches any other exceptions and prints "Other issues" if a different error occurs.

This script helps to verify if the issue is present or has been resolved.
2025-05-03 14:15:57,528 - INFO - raw output:
```python
import matplotlib.pyplot as plt

def test_postscript_backend_empty_line_issue():
    try:
        from matplotlib.figure import Figure

        # Code to reproduce the issue
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')

        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_postscript_backend_empty_line_issue()
```

This script will attempt to reproduce the issue described in the provided issue text. If the issue is reproduced, it will print "Issue reproduced". If the issue does not occur and the figure is saved successfully, it will print "Issue resolved". If any other issues arise, it will print "Other issues".
2025-05-03 14:15:57,528 - INFO - raw output:
```python
from matplotlib.figure import Figure

def test_ps_backend_empty_line_issue():
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        # This line is expected to cause the issue
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues:", str(e))

test_ps_backend_empty_line_issue()
```

This test script follows the given structure and includes the necessary imports, code to reproduce the issue described in the issue text, and print statements to indicate whether the issue is reproduced, resolved, or if there are other issues. Running this script should help in verifying if the issue persists or if it has been fixed.
2025-05-03 14:15:57,528 - INFO - raw output:
```python
import matplotlib
from matplotlib.figure import Figure

def test_ps_backend_empty_line_issue():
    # Code to reproduce the issue
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_ps_backend_empty_line_issue()
```

This test script will attempt to reproduce the issue by saving a figure containing a multi-line text label with an empty line using the PostScript backend. If the specific `TypeError` is encountered, it will print "Issue reproduced". If the figure is saved without errors, it will print "Issue resolved". Any other exceptions will be caught, and it will print "Other issues".
2025-05-03 14:15:57,528 - INFO - raw output:
```python
import matplotlib
from matplotlib.figure import Figure

def test_text_label_empty_line_postscript():
    try:
        figure = Figure()
        ax = figure.add_subplot(111)
        ax.annotate(text='\nLower label', xy=(0, 0))
        figure.savefig('figure.eps')
        print("Issue resolved")
    except TypeError as e:
        if "cannot unpack non-iterable NoneType object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_text_label_empty_line_postscript()
```

This test script does the following:
1. Imports the necessary matplotlib module and the `Figure` class.
2. Creates a figure and adds a subplot.
3. Adds an annotation with a text label containing an empty line.
4. Attempts to save the figure as a PostScript file (`figure.eps`).
5. Catches the `TypeError` if it occurs and prints "Issue reproduced".
6. Prints "Issue resolved" if the figure is saved without any errors.
7. Prints "Other issues" if any other exceptions occur.

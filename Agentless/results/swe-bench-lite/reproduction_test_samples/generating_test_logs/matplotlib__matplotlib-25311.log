2025-05-02 17:20:55,866 - INFO - ================ generating test for matplotlib__matplotlib-25311 ================
2025-05-02 17:20:56,040 - INFO - prompting with message:
We are currently solving the following issue within our repository. Here is the issue text:
--- BEGIN ISSUE ---
[Bug]: Unable to pickle figure with draggable legend
### Bug summary

I am unable to pickle figure with draggable legend. Same error comes for draggable annotations.





### Code for reproduction

```python
import matplotlib.pyplot as plt
import pickle

fig = plt.figure()
ax = fig.add_subplot(111)

time=[0,1,2,3,4]
speed=[40,43,45,47,48]

ax.plot(time,speed,label="speed")

leg=ax.legend()
leg.set_draggable(True) #pickling works after removing this line 

pickle.dumps(fig)
plt.show()
```


### Actual outcome

`TypeError: cannot pickle 'FigureCanvasQTAgg' object`

### Expected outcome

Pickling successful

### Additional information

_No response_

### Operating system

Windows 10

### Matplotlib Version

3.7.0

### Matplotlib Backend

_No response_

### Python version

3.10

### Jupyter version

_No response_

### Installation

pip

--- END ISSUE ---

Please generate a complete test that can be used to reproduce the issue.

The complete test should contain the following:
1. Necessary imports
2. Code to reproduce the issue described in the issue text
3. Print "Issue reproduced" if the outcome indicates that the issue is reproduced
4. Print "Issue resolved" if the outcome indicates that the issue has been successfully resolved
5. Print "Other issues" if the outcome indicates there are other issues with the source code

Here is an example:

```python
from sqlfluff import lint

def test__rules__std_L060_raised() -> None:
    try:
        sql = "SELECT   IFNULL(NULL, 100),
            NVL(NULL,100);"
        result = lint(sql, rules=["L060"])
        assert len(result) == 2
    except:
        print("Other issues")
        return

    try:
        assert result[0]["description"] == "Use 'COALESCE' instead of 'IFNULL'."
        assert result[1]["description"] == "Use 'COALESCE' instead of 'NVL'."
        print("Issue resolved")
    except AssertionError:
        print("Issue reproduced")
        return

    return

test__rules__std_L060_raised()
```

Please ensure the generated test reflects the issue described in the provided issue text.
The generated test should be able to be used to both reproduce the issue as well as to verify the issue has been fixed.
Wrap the complete test in ```python...```.
2025-05-02 17:20:56,051 - INFO - Initializing a decoder model: gpt-4o-2024-05-13 ...
2025-05-03 14:15:59,915 - INFO - ================ generating test for matplotlib__matplotlib-25311 ================
2025-05-03 14:15:59,938 - INFO - prompting with message:
We are currently solving the following issue within our repository. Here is the issue text:
--- BEGIN ISSUE ---
[Bug]: Unable to pickle figure with draggable legend
### Bug summary

I am unable to pickle figure with draggable legend. Same error comes for draggable annotations.





### Code for reproduction

```python
import matplotlib.pyplot as plt
import pickle

fig = plt.figure()
ax = fig.add_subplot(111)

time=[0,1,2,3,4]
speed=[40,43,45,47,48]

ax.plot(time,speed,label="speed")

leg=ax.legend()
leg.set_draggable(True) #pickling works after removing this line 

pickle.dumps(fig)
plt.show()
```


### Actual outcome

`TypeError: cannot pickle 'FigureCanvasQTAgg' object`

### Expected outcome

Pickling successful

### Additional information

_No response_

### Operating system

Windows 10

### Matplotlib Version

3.7.0

### Matplotlib Backend

_No response_

### Python version

3.10

### Jupyter version

_No response_

### Installation

pip

--- END ISSUE ---

Please generate a complete test that can be used to reproduce the issue.

The complete test should contain the following:
1. Necessary imports
2. Code to reproduce the issue described in the issue text
3. Print "Issue reproduced" if the outcome indicates that the issue is reproduced
4. Print "Issue resolved" if the outcome indicates that the issue has been successfully resolved
5. Print "Other issues" if the outcome indicates there are other issues with the source code

Here is an example:

```python
from sqlfluff import lint

def test__rules__std_L060_raised() -> None:
    try:
        sql = "SELECT   IFNULL(NULL, 100),
            NVL(NULL,100);"
        result = lint(sql, rules=["L060"])
        assert len(result) == 2
    except:
        print("Other issues")
        return

    try:
        assert result[0]["description"] == "Use 'COALESCE' instead of 'IFNULL'."
        assert result[1]["description"] == "Use 'COALESCE' instead of 'NVL'."
        print("Issue resolved")
    except AssertionError:
        print("Issue reproduced")
        return

    return

test__rules__std_L060_raised()
```

Please ensure the generated test reflects the issue described in the provided issue text.
The generated test should be able to be used to both reproduce the issue as well as to verify the issue has been fixed.
Wrap the complete test in ```python...```.
2025-05-03 14:15:59,938 - INFO - Initializing a decoder model: gpt-4o-2024-05-13 ...
2025-05-03 14:15:59,945 - INFO - Creating API request
2025-05-03 14:16:06,344 - INFO - API response ChatCompletion(id='chatcmpl-BTCd6jnDRtrCiEzK0kWwHHsfIsO7q', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling works after removing this line\n\n        pickle.dumps(fig)\n        plt.show()\n        print("Issue resolved")\n    except TypeError as e:\n        if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None))], created=1746299760, model='gpt-4o-2024-05-13', object='chat.completion', service_tier='default', system_fingerprint='fp_b70b7e9c76', usage=CompletionUsage(completion_tokens=190, prompt_tokens=568, total_tokens=758, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))
2025-05-03 14:16:06,346 - INFO - Initializing a decoder model: gpt-4o-2024-05-13 ...
2025-05-03 14:16:06,360 - INFO - Creating API request
2025-05-03 14:16:45,417 - INFO - API response ChatCompletion(id='chatcmpl-BTCdCaDU4QtCVBXOfiBbCNrB99Oio', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling works after removing this line \n\n        try:\n            pickle.dumps(fig)\n        except TypeError as e:\n            if "cannot pickle \'FigureCanvasQTAgg\' object" in str(e):\n                print("Issue reproduced")\n                return\n            else:\n                print("Other issues")\n                return\n\n        print("Issue resolved")\n    except Exception as e:\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=1, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling works after removing this line\n\n        pickle.dumps(fig)\n        plt.show()\n        \n        print("Issue resolved")\n    except TypeError as e:\n        if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=2, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # Remove this line to avoid the issue\n\n        try:\n            pickle.dumps(fig)\n            print("Issue resolved")\n        except TypeError as e:\n            if "FigureCanvasQTAgg" in str(e):\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```\n\nThis test script:\n1. Imports the necessary modules (`matplotlib.pyplot` and `pickle`).\n2. Reproduces the issue as described in the provided issue text.\n3. Checks the outcome and prints:\n   - "Issue reproduced" if the `TypeError` related to `FigureCanvasQTAgg` is raised.\n   - "Issue resolved" if the figure is pickled successfully.\n   - "Other issues" for any other exceptions that might occur.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=3, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling fails with this line\n\n        try:\n            pickle.dumps(fig)\n            plt.show()\n            print("Issue resolved")\n        except TypeError as e:\n            if "cannot pickle \'FigureCanvasQTAgg\' object" in str(e):\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n    except Exception as e:\n        print(f"Other issues: {e}")\n\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=4, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # Issue is related to this line\n\n        try:\n            pickle.dumps(fig)\n            print("Issue resolved")\n        except TypeError as e:\n            if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=5, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # Pickling works after removing this line\n\n        # Attempt to pickle the figure\n        pickle.dumps(fig)\n        \n        # If no exceptions are raised\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot pickle \'FigureCanvasQTAgg\' object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```\n\nThis test script performs the following:\n1. Imports the necessary modules (`matplotlib.pyplot` and `pickle`).\n2. Reproduces the issue described in the original issue text.\n3. Prints "Issue resolved" if the figure is pickled successfully.\n4. Prints "Issue reproduced" if the `TypeError` with the specific message is encountered.\n5. Prints "Other issues" if any other exceptions are raised.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=6, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # Pickling fails with this line\n\n        # Try to pickle the figure\n        pickle.dumps(fig)\n        \n        # If pickle succeeds, we print "Issue resolved"\n        print("Issue resolved")\n        \n    except TypeError as e:\n        if "cannot pickle \'FigureCanvasQTAgg\' object" in str(e):\n            # If the specific error message is raised, it means the issue is reproduced\n            print("Issue reproduced")\n        else:\n            # If any other TypeError is raised\n            print("Other issues")\n    except Exception as e:\n        # Catch all other exceptions and mark as other issues\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```\n\nThis test script will:\n1. Import the necessary `matplotlib` and `pickle` modules.\n2. Create a figure and a subplot, and plot some sample data.\n3. Create a legend and set it to be draggable.\n4. Attempt to pickle the figure.\n5. Catch the `TypeError` exception specific to the issue described and print "Issue reproduced".\n6. Print "Other issues" if any other exceptions are encountered.\n7. Print "Issue resolved" if the figure is successfully pickled.\n\nBy running this script, you can check whether the issue still exists or has been resolved.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=7, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # This line causes the issue\n\n        try:\n            pickle.dumps(fig)\n            print("Issue resolved")\n        except TypeError as e:\n            if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n\n    except Exception as e:\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=8, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # Pickling works after removing this line\n\n        # Attempt to pickle the figure\n        pickle_data = pickle.dumps(fig)\n\n        # If we reach this point without exception, the issue is resolved\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot pickle \'FigureCanvasQTAgg\' object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```\n\nThis script follows the provided guidelines and includes:\n1. The necessary imports.\n2. Code to reproduce the issue described in the issue text.\n3. A check for whether the specific issue is reproduced, with corresponding print statements for the different outcomes.\n4. A test function to facilitate the automated testing of this issue.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=9, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling fails due to this line\n\n        # Attempt to pickle the figure\n        pickle.dumps(fig)\n        plt.show()\n        \n        # If pickling is successful\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot pickle \'FigureCanvasQTAgg\' object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\n# Run the test\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=10, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling works after removing this line\n\n        pickle.dumps(fig)\n        plt.show()\n\n        print("Issue resolved")\n    except TypeError as e:\n        if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception:\n        print("Other issues")\n\ntest_pickle_draggable_legend()\n```\n\nThis test script does the following:\n1. Imports necessary libraries.\n2. Reproduces the issue described in the issue text.\n3. Prints "Issue resolved" if no exception is raised and the figure is successfully pickled.\n4. Prints "Issue reproduced" if the exact `TypeError` described in the issue is encountered.\n5. Prints "Other issues" if any other exception is raised.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=11, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling works after removing this line\n\n        try:\n            # Attempt to pickle the figure\n            pickle.dumps(fig)\n            print("Issue resolved")\n        except TypeError as e:\n            if "cannot pickle \'FigureCanvasQTAgg\' object" in str(e):\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n        except Exception as e:\n            print(f"Other issues: {e}")\n        \n        plt.show()\n    except Exception as outer_exception:\n        print(f"Other issues: {outer_exception}")\n\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=12, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling works after removing this line\n\n        try:\n            pickle.dumps(fig)\n            print("Issue resolved")\n        except TypeError as e:\n            if "cannot pickle \'FigureCanvasQTAgg\' object" in str(e):\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=13, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        # Reproducing the issue\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # Pickling fails with this line\n\n        # Attempt to pickle the figure\n        try:\n            pickle.dumps(fig)\n            print("Issue resolved")\n        except TypeError as e:\n            if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n        except Exception as e:\n            print(f"Other issues: {e}")\n        finally:\n            plt.close(fig)\n    except Exception as e:\n        print(f"Other issues: {e}")\n\ntest_pickle_figure_with_draggable_legend()\n```\n\n**Explanation:**\n\n1. **Necessary Imports**: The test includes necessary imports for `matplotlib.pyplot` and `pickle`.\n2. **Code to Reproduce the Issue**: The test code sets up a matplotlib figure with a draggable legend and attempts to pickle the figure, just as described in the issue.\n3. **Outcome Verification**:\n   - If the `TypeError` with the specific message `"cannot pickle \'FigureCanvasQTAgg\' object"` is raised, it prints `"Issue reproduced"`.\n   - If the pickling succeeds without any errors, it prints `"Issue resolved"`.\n   - If any other type of exception occurs, it prints `"Other issues"` with the exception message for additional context.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=14, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling works after removing this line\n\n        pickle.dumps(fig)\n        plt.show()\n    except TypeError as e:\n        if "FigureCanvasQTAgg" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    else:\n        print("Issue resolved")\n\ntest_pickle_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=15, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling works after removing this line\n\n        pickle.dumps(fig)\n        plt.show()\n        print("Issue resolved")\n    except TypeError as e:\n        if \'cannot pickle\' in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception:\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```\n\nExplanation:\n1. **Necessary imports**: We imported `matplotlib.pyplot` and `pickle`.\n2. **Code to reproduce the issue**: Added the provided code to create a figure, plot data, make the legend draggable, and attempt to pickle the figure.\n3. **Print appropriate messages**: Used `try` and `except` blocks to catch the specific `TypeError` related to pickling and print "Issue reproduced". If pickling succeeds, it prints "Issue resolved". Other exceptions will print "Other issues".', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=16, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # Pickling fails with this line\n\n        pickle.dumps(fig)\n        plt.show()\n    except TypeError as e:\n        if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    else:\n        print("Issue resolved")\n\ntest_pickle_figure_with_draggable_legend()\n```\n\nExplanation:\n1. The code sets up a Matplotlib figure with a draggable legend.\n2. It attempts to pickle the figure, which should reproduce the issue.\n3. If the specific `TypeError` is caught, it prints "Issue reproduced".\n4. If any other type of issue is encountered, it prints "Other issues".\n5. If no issues are encountered and the pickling is successful, it prints "Issue resolved".', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=17, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        # Create a figure and a subplot\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        # Sample data\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        # Plot data with a label\n        ax.plot(time, speed, label="speed")\n\n        # Add a legend and make it draggable\n        leg = ax.legend()\n        leg.set_draggable(True)\n\n        # Attempt to pickle the figure\n        pickle.dumps(fig)\n        \n        # If no exception is raised, the issue is resolved\n        print("Issue resolved")\n    except TypeError as e:\n        if \'FigureCanvasQTAgg\' in str(e):\n            # If the specific error mentioned in the issue is raised, the issue is reproduced\n            print("Issue reproduced")\n        else:\n            # If a different error is raised, denote as other issue\n            print("Other issues")\n    except Exception as e:\n        # Catch any other exceptions and denote as other issue\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=18, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n        \n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n        \n        ax.plot(time, speed, label="speed")\n        \n        leg = ax.legend()\n        leg.set_draggable(True)  # This line causes the issue\n        \n        pickle.dumps(fig)\n        \n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot pickle \'FigureCanvasQTAgg\' object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```\n\nThis test script follows the details provided in the issue text. It attempts to pickle a Matplotlib figure containing a draggable legend, which is expected to fail due to the reported bug. Depending on the outcome:\n\n- If the specific `TypeError` related to pickling is raised, it prints "Issue reproduced".\n- If other exceptions are raised, it prints "Other issues".\n- If no exceptions are raised, it prints "Issue resolved".', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=19, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling works after removing this line \n\n        try:\n            pickle.dumps(fig)\n            print("Issue resolved")\n        except TypeError as e:\n            if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=20, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_issue_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # Pickling fails with this line\n\n        try:\n            pickle.dumps(fig)\n            print("Issue resolved")\n        except TypeError as e:\n            if "FigureCanvasQTAgg" in str(e):\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n    except Exception as e:\n        print(f"Other issues: {e}")\n\ntest_issue_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=21, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling works after removing this line\n\n        pickle.dumps(fig)\n        plt.show()\n\n        # If we reach this point without an exception, the issue is resolved\n        print("Issue resolved")\n    except TypeError as e:\n        if \'FigureCanvasQTAgg\' in str(e):\n            # If the specific error is caught, the issue is reproduced\n            print("Issue reproduced")\n        else:\n            # If another TypeError is caught, there are other issues\n            print("Other issues")\n    except Exception as e:\n        # Catch any other exceptions and classify them as other issues\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=22, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # Pickling fails with this line \n\n        pickle.dumps(fig)\n        plt.show()\n    except TypeError as e:\n        if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    else:\n        print("Issue resolved")\n\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=23, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True) # pickling works after removing this line\n\n        # Try to pickle the figure\n        pickle.dumps(fig)\n        plt.show()\n        print("Issue resolved")\n    except TypeError as e:\n        if \'FigureCanvasQTAgg\' in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=24, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling works after removing this line \n\n        pickle.dumps(fig)\n        plt.show()\n        print("Issue resolved")\n    except TypeError as e:\n        if \'cannot pickle\' in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues:", str(e))\n\n# Run the test\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=25, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_draggable_legend_pickling():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling works after removing this line\n\n        # Try to pickle the figure\n        try:\n            pickle.dumps(fig)\n            print("Issue resolved")\n        except TypeError as e:\n            if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_draggable_legend_pickling()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=26, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling fails when this line is present\n\n        # Try to pickle the figure\n        pickle.dumps(fig)\n        \n        # If no exception is raised, the issue is resolved\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot pickle \'FigureCanvasQTAgg\' object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print(f"Other issues: {e}")\n\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=27, logprobs=None, message=ChatCompletionMessage(content='Here\'s a complete test script to reproduce the issue described in the issue text and check for the resolution:\n\n```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        # Create a figure and add a subplot\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        # Sample data\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        # Plot data with a label\n        ax.plot(time, speed, label="speed")\n\n        # Add a legend with draggable set to True\n        leg = ax.legend()\n        leg.set_draggable(True)  # Pickling works after removing this line\n\n        # Attempt to pickle the figure\n        pickle.dumps(fig)\n    except TypeError as e:\n        if "FigureCanvasQTAgg" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    else:\n        print("Issue resolved")\n\ntest_pickle_figure_with_draggable_legend()\n```\n\nThis test script follows the specified guidelines:\n1. It includes the necessary imports (`matplotlib.pyplot` and `pickle`).\n2. It contains the code to reproduce the issue described in the issue text.\n3. It prints "Issue reproduced" if the outcome indicates that the issue is reproduced (i.e., a `TypeError` with "FigureCanvasQTAgg" is raised).\n4. It prints "Issue resolved" if the figure is pickled successfully without any exceptions.\n5. It prints "Other issues" if any other exception is raised.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=28, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_figure_pickling():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling works after removing this line \n\n        pickle.dumps(fig)\n        plt.show()\n    except TypeError as e:\n        if "cannot pickle \'FigureCanvasQTAgg\' object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues:", str(e))\n    else:\n        print("Issue resolved")\n\ntest_figure_pickling()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=29, logprobs=None, message=ChatCompletionMessage(content='Certainly! Below is a complete test that you can use to reproduce the issue described in the issue text. This test script will check whether the pickling of a figure with a draggable legend results in the expected error, and it will print the appropriate messages based on the outcome.\n\n```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_draggable_legend() -> None:\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # This line is causing the issue\n\n        # Attempt to pickle the figure\n        try:\n            pickle.dumps(fig)\n            print("Issue resolved")\n        except TypeError as e:\n            if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n    except Exception as e:\n        print("Other issues", str(e))\n\ntest_pickle_draggable_legend()\n```\n\nThis script attempts to reproduce the pickling issue described in the original issue text. If the error message matches the expected `\'TypeError: cannot pickle \'FigureCanvasQTAgg\' object\'`, it will print "Issue reproduced". If pickling is successful, it will print "Issue resolved". Any other exceptions will result in "Other issues" being printed along with the exception message.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=30, logprobs=None, message=ChatCompletionMessage(content='Certainly! Below is a complete test script that can be used to reproduce and verify the issue described in your issue text:\n\n```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # Pickling fails with this line\n\n        pickle.dumps(fig)\n        plt.show()\n        print("Issue resolved")\n    except TypeError as e:\n        if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```\n\n### Explanation:\n1. **Necessary imports**: The script imports `matplotlib.pyplot` and `pickle` as needed.\n2. **Code to reproduce the issue**: The script contains the exact code provided in the issue text to reproduce the issue.\n3. **Print statements for outcomes**:\n    - `print("Issue resolved")`: This is printed if the figure is pickled successfully.\n    - `print("Issue reproduced")`: This is printed if the specific `TypeError` indicating the pickling issue is raised.\n    - `print("Other issues")`: This is printed if any other exceptions are raised.\n\nThis test makes it easy to determine if the issue has been resolved or if it is still present.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=31, logprobs=None, message=ChatCompletionMessage(content='Here is the complete test code that you can use to reproduce the issue and verify whether it has been fixed:\n\n```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling works after removing this line \n\n        try:\n            pickle.dumps(fig)\n            print("Issue resolved")\n        except TypeError as e:\n            if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```\n\nThis code follows the steps outlined in the issue and has appropriate print statements to indicate whether the issue is reproduced, resolved, or if there are other issues.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=32, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # Issue occurs with this line\n\n        pickle.dumps(fig)\n        plt.show()\n        print("Issue resolved")\n    except TypeError as e:\n        if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=33, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickling_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # Pickling works after removing this line\n\n        pickle.dumps(fig)\n        plt.show()\n        print("Issue resolved")\n    except TypeError as e:\n        if "cannot pickle \'FigureCanvasQTAgg\' object" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n        print(e)\n\ntest_pickling_with_draggable_legend()\n```\n\nThis test script:\n\n1. Imports the necessary modules.\n2. Creates a plot with a draggable legend.\n3. Attempts to pickle the figure.\n4. Catches the specific `TypeError` that matches the described issue and prints "Issue reproduced".\n5. Prints "Issue resolved" if no errors are encountered.\n6. Prints "Other issues" for any other exceptions.', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=34, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickling_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time=[0,1,2,3,4]\n        speed=[40,43,45,47,48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # This line causes the pickling issue\n\n        try:\n            pickle.dumps(fig)\n            plt.show()\n            print("Issue resolved")\n        except TypeError as e:\n            if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n    except Exception as ex:\n        print(f"Other issues: {ex}")\n\ntest_pickling_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=35, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickling_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0,1,2,3,4]\n        speed = [40,43,45,47,48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # Pickling fails when this line is included\n\n        # Attempt to pickle the figure\n        pickle.dumps(fig)\n        plt.show()\n        print("Issue resolved")\n    except TypeError as e:\n        if "FigureCanvasQTAgg" in str(e):\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        print("Other issues")\n\ntest_pickling_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=36, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\n# Define the test function\ndef test_pickle_draggable_legend():\n    try:\n        # Create a figure and a subplot\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        # Sample data\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        # Plot the data\n        ax.plot(time, speed, label="speed")\n\n        # Add a legend and make it draggable\n        leg = ax.legend()\n        leg.set_draggable(True)\n\n        # Try to pickle the figure\n        pickle.dumps(fig)\n\n        # Show the plot (for completeness, not necessary for the test)\n        plt.show()\n\n    except TypeError as e:\n        # Check if the error is specific to the described issue\n        if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        # Catch any other exceptions that may occur\n        print("Other issues")\n    else:\n        # If no exceptions are raised, the issue is resolved\n        print("Issue resolved")\n\n# Run the test\ntest_pickle_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=37, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        # Code to reproduce the issue described in the issue text\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n        \n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n        \n        ax.plot(time, speed, label="speed")\n        \n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling fails with this line\n        \n        # Attempt to pickle the figure\n        pickle.dumps(fig)\n        plt.show()\n        \n        # If no exception was raised, the issue is resolved\n        print("Issue resolved")\n    except TypeError as e:\n        if str(e) == "cannot pickle \'FigureCanvasQTAgg\' object":\n            print("Issue reproduced")\n        else:\n            print("Other issues")\n    except Exception as e:\n        # Catch any other exceptions that may occur\n        print(f"Other issues: {e}")\n\n# Run the test\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None)), Choice(finish_reason='stop', index=38, logprobs=None, message=ChatCompletionMessage(content='```python\nimport matplotlib.pyplot as plt\nimport pickle\n\ndef test_pickle_figure_with_draggable_legend():\n    try:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n\n        time = [0, 1, 2, 3, 4]\n        speed = [40, 43, 45, 47, 48]\n\n        ax.plot(time, speed, label="speed")\n\n        leg = ax.legend()\n        leg.set_draggable(True)  # pickling works after removing this line\n\n        try:\n            pickle.dumps(fig)\n            plt.show()\n            print("Issue resolved")\n        except TypeError as e:\n            if \'FigureCanvasQTAgg\' in str(e):\n                print("Issue reproduced")\n            else:\n                print("Other issues")\n    except Exception as e:\n        print("Other issues:", e)\n\ntest_pickle_figure_with_draggable_legend()\n```', refusal=None, role='assistant', annotations=[], audio=None, function_call=None, tool_calls=None))], created=1746299766, model='gpt-4o-2024-05-13', object='chat.completion', service_tier='default', system_fingerprint='fp_b70b7e9c76', usage=CompletionUsage(completion_tokens=9300, prompt_tokens=568, total_tokens=9868, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))
2025-05-03 14:16:45,419 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling works after removing this line

        pickle.dumps(fig)
        plt.show()
        print("Issue resolved")
    except TypeError as e:
        if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,419 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling works after removing this line 

        try:
            pickle.dumps(fig)
        except TypeError as e:
            if "cannot pickle 'FigureCanvasQTAgg' object" in str(e):
                print("Issue reproduced")
                return
            else:
                print("Other issues")
                return

        print("Issue resolved")
    except Exception as e:
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,419 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling works after removing this line

        pickle.dumps(fig)
        plt.show()
        
        print("Issue resolved")
    except TypeError as e:
        if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,420 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # Remove this line to avoid the issue

        try:
            pickle.dumps(fig)
            print("Issue resolved")
        except TypeError as e:
            if "FigureCanvasQTAgg" in str(e):
                print("Issue reproduced")
            else:
                print("Other issues")
    except Exception as e:
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```

This test script:
1. Imports the necessary modules (`matplotlib.pyplot` and `pickle`).
2. Reproduces the issue as described in the provided issue text.
3. Checks the outcome and prints:
   - "Issue reproduced" if the `TypeError` related to `FigureCanvasQTAgg` is raised.
   - "Issue resolved" if the figure is pickled successfully.
   - "Other issues" for any other exceptions that might occur.
2025-05-03 14:16:45,421 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling fails with this line

        try:
            pickle.dumps(fig)
            plt.show()
            print("Issue resolved")
        except TypeError as e:
            if "cannot pickle 'FigureCanvasQTAgg' object" in str(e):
                print("Issue reproduced")
            else:
                print("Other issues")
    except Exception as e:
        print(f"Other issues: {e}")

test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,421 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # Issue is related to this line

        try:
            pickle.dumps(fig)
            print("Issue resolved")
        except TypeError as e:
            if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
                print("Issue reproduced")
            else:
                print("Other issues")
    except Exception as e:
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,421 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # Pickling works after removing this line

        # Attempt to pickle the figure
        pickle.dumps(fig)
        
        # If no exceptions are raised
        print("Issue resolved")
    except TypeError as e:
        if "cannot pickle 'FigureCanvasQTAgg' object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```

This test script performs the following:
1. Imports the necessary modules (`matplotlib.pyplot` and `pickle`).
2. Reproduces the issue described in the original issue text.
3. Prints "Issue resolved" if the figure is pickled successfully.
4. Prints "Issue reproduced" if the `TypeError` with the specific message is encountered.
5. Prints "Other issues" if any other exceptions are raised.
2025-05-03 14:16:45,421 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # Pickling fails with this line

        # Try to pickle the figure
        pickle.dumps(fig)
        
        # If pickle succeeds, we print "Issue resolved"
        print("Issue resolved")
        
    except TypeError as e:
        if "cannot pickle 'FigureCanvasQTAgg' object" in str(e):
            # If the specific error message is raised, it means the issue is reproduced
            print("Issue reproduced")
        else:
            # If any other TypeError is raised
            print("Other issues")
    except Exception as e:
        # Catch all other exceptions and mark as other issues
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```

This test script will:
1. Import the necessary `matplotlib` and `pickle` modules.
2. Create a figure and a subplot, and plot some sample data.
3. Create a legend and set it to be draggable.
4. Attempt to pickle the figure.
5. Catch the `TypeError` exception specific to the issue described and print "Issue reproduced".
6. Print "Other issues" if any other exceptions are encountered.
7. Print "Issue resolved" if the figure is successfully pickled.

By running this script, you can check whether the issue still exists or has been resolved.
2025-05-03 14:16:45,421 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # This line causes the issue

        try:
            pickle.dumps(fig)
            print("Issue resolved")
        except TypeError as e:
            if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
                print("Issue reproduced")
            else:
                print("Other issues")

    except Exception as e:
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,421 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # Pickling works after removing this line

        # Attempt to pickle the figure
        pickle_data = pickle.dumps(fig)

        # If we reach this point without exception, the issue is resolved
        print("Issue resolved")
    except TypeError as e:
        if "cannot pickle 'FigureCanvasQTAgg' object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```

This script follows the provided guidelines and includes:
1. The necessary imports.
2. Code to reproduce the issue described in the issue text.
3. A check for whether the specific issue is reproduced, with corresponding print statements for the different outcomes.
4. A test function to facilitate the automated testing of this issue.
2025-05-03 14:16:45,421 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling fails due to this line

        # Attempt to pickle the figure
        pickle.dumps(fig)
        plt.show()
        
        # If pickling is successful
        print("Issue resolved")
    except TypeError as e:
        if "cannot pickle 'FigureCanvasQTAgg' object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

# Run the test
test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,421 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling works after removing this line

        pickle.dumps(fig)
        plt.show()

        print("Issue resolved")
    except TypeError as e:
        if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception:
        print("Other issues")

test_pickle_draggable_legend()
```

This test script does the following:
1. Imports necessary libraries.
2. Reproduces the issue described in the issue text.
3. Prints "Issue resolved" if no exception is raised and the figure is successfully pickled.
4. Prints "Issue reproduced" if the exact `TypeError` described in the issue is encountered.
5. Prints "Other issues" if any other exception is raised.
2025-05-03 14:16:45,421 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling works after removing this line

        try:
            # Attempt to pickle the figure
            pickle.dumps(fig)
            print("Issue resolved")
        except TypeError as e:
            if "cannot pickle 'FigureCanvasQTAgg' object" in str(e):
                print("Issue reproduced")
            else:
                print("Other issues")
        except Exception as e:
            print(f"Other issues: {e}")
        
        plt.show()
    except Exception as outer_exception:
        print(f"Other issues: {outer_exception}")

test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,421 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling works after removing this line

        try:
            pickle.dumps(fig)
            print("Issue resolved")
        except TypeError as e:
            if "cannot pickle 'FigureCanvasQTAgg' object" in str(e):
                print("Issue reproduced")
            else:
                print("Other issues")
    except Exception as e:
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,421 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        # Reproducing the issue
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # Pickling fails with this line

        # Attempt to pickle the figure
        try:
            pickle.dumps(fig)
            print("Issue resolved")
        except TypeError as e:
            if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
                print("Issue reproduced")
            else:
                print("Other issues")
        except Exception as e:
            print(f"Other issues: {e}")
        finally:
            plt.close(fig)
    except Exception as e:
        print(f"Other issues: {e}")

test_pickle_figure_with_draggable_legend()
```

**Explanation:**

1. **Necessary Imports**: The test includes necessary imports for `matplotlib.pyplot` and `pickle`.
2. **Code to Reproduce the Issue**: The test code sets up a matplotlib figure with a draggable legend and attempts to pickle the figure, just as described in the issue.
3. **Outcome Verification**:
   - If the `TypeError` with the specific message `"cannot pickle 'FigureCanvasQTAgg' object"` is raised, it prints `"Issue reproduced"`.
   - If the pickling succeeds without any errors, it prints `"Issue resolved"`.
   - If any other type of exception occurs, it prints `"Other issues"` with the exception message for additional context.
2025-05-03 14:16:45,421 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling works after removing this line

        pickle.dumps(fig)
        plt.show()
    except TypeError as e:
        if "FigureCanvasQTAgg" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    else:
        print("Issue resolved")

test_pickle_draggable_legend()
```
2025-05-03 14:16:45,421 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling works after removing this line

        pickle.dumps(fig)
        plt.show()
        print("Issue resolved")
    except TypeError as e:
        if 'cannot pickle' in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception:
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```

Explanation:
1. **Necessary imports**: We imported `matplotlib.pyplot` and `pickle`.
2. **Code to reproduce the issue**: Added the provided code to create a figure, plot data, make the legend draggable, and attempt to pickle the figure.
3. **Print appropriate messages**: Used `try` and `except` blocks to catch the specific `TypeError` related to pickling and print "Issue reproduced". If pickling succeeds, it prints "Issue resolved". Other exceptions will print "Other issues".
2025-05-03 14:16:45,421 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # Pickling fails with this line

        pickle.dumps(fig)
        plt.show()
    except TypeError as e:
        if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
            print("Issue reproduced")
        else:
            print("Other issues")
    else:
        print("Issue resolved")

test_pickle_figure_with_draggable_legend()
```

Explanation:
1. The code sets up a Matplotlib figure with a draggable legend.
2. It attempts to pickle the figure, which should reproduce the issue.
3. If the specific `TypeError` is caught, it prints "Issue reproduced".
4. If any other type of issue is encountered, it prints "Other issues".
5. If no issues are encountered and the pickling is successful, it prints "Issue resolved".
2025-05-03 14:16:45,422 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        # Create a figure and a subplot
        fig = plt.figure()
        ax = fig.add_subplot(111)

        # Sample data
        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        # Plot data with a label
        ax.plot(time, speed, label="speed")

        # Add a legend and make it draggable
        leg = ax.legend()
        leg.set_draggable(True)

        # Attempt to pickle the figure
        pickle.dumps(fig)
        
        # If no exception is raised, the issue is resolved
        print("Issue resolved")
    except TypeError as e:
        if 'FigureCanvasQTAgg' in str(e):
            # If the specific error mentioned in the issue is raised, the issue is reproduced
            print("Issue reproduced")
        else:
            # If a different error is raised, denote as other issue
            print("Other issues")
    except Exception as e:
        # Catch any other exceptions and denote as other issue
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,422 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)
        
        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]
        
        ax.plot(time, speed, label="speed")
        
        leg = ax.legend()
        leg.set_draggable(True)  # This line causes the issue
        
        pickle.dumps(fig)
        
        print("Issue resolved")
    except TypeError as e:
        if "cannot pickle 'FigureCanvasQTAgg' object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```

This test script follows the details provided in the issue text. It attempts to pickle a Matplotlib figure containing a draggable legend, which is expected to fail due to the reported bug. Depending on the outcome:

- If the specific `TypeError` related to pickling is raised, it prints "Issue reproduced".
- If other exceptions are raised, it prints "Other issues".
- If no exceptions are raised, it prints "Issue resolved".
2025-05-03 14:16:45,422 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling works after removing this line 

        try:
            pickle.dumps(fig)
            print("Issue resolved")
        except TypeError as e:
            if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
                print("Issue reproduced")
            else:
                print("Other issues")
    except Exception as e:
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,422 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_issue_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # Pickling fails with this line

        try:
            pickle.dumps(fig)
            print("Issue resolved")
        except TypeError as e:
            if "FigureCanvasQTAgg" in str(e):
                print("Issue reproduced")
            else:
                print("Other issues")
    except Exception as e:
        print(f"Other issues: {e}")

test_issue_draggable_legend()
```
2025-05-03 14:16:45,422 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling works after removing this line

        pickle.dumps(fig)
        plt.show()

        # If we reach this point without an exception, the issue is resolved
        print("Issue resolved")
    except TypeError as e:
        if 'FigureCanvasQTAgg' in str(e):
            # If the specific error is caught, the issue is reproduced
            print("Issue reproduced")
        else:
            # If another TypeError is caught, there are other issues
            print("Other issues")
    except Exception as e:
        # Catch any other exceptions and classify them as other issues
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,422 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # Pickling fails with this line 

        pickle.dumps(fig)
        plt.show()
    except TypeError as e:
        if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
            print("Issue reproduced")
        else:
            print("Other issues")
    else:
        print("Issue resolved")

test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,422 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True) # pickling works after removing this line

        # Try to pickle the figure
        pickle.dumps(fig)
        plt.show()
        print("Issue resolved")
    except TypeError as e:
        if 'FigureCanvasQTAgg' in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,422 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling works after removing this line 

        pickle.dumps(fig)
        plt.show()
        print("Issue resolved")
    except TypeError as e:
        if 'cannot pickle' in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues:", str(e))

# Run the test
test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,422 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_draggable_legend_pickling():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling works after removing this line

        # Try to pickle the figure
        try:
            pickle.dumps(fig)
            print("Issue resolved")
        except TypeError as e:
            if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
                print("Issue reproduced")
            else:
                print("Other issues")
    except Exception as e:
        print("Other issues")

test_draggable_legend_pickling()
```
2025-05-03 14:16:45,422 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling fails when this line is present

        # Try to pickle the figure
        pickle.dumps(fig)
        
        # If no exception is raised, the issue is resolved
        print("Issue resolved")
    except TypeError as e:
        if "cannot pickle 'FigureCanvasQTAgg' object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print(f"Other issues: {e}")

test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,422 - INFO - raw output:
Here's a complete test script to reproduce the issue described in the issue text and check for the resolution:

```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        # Create a figure and add a subplot
        fig = plt.figure()
        ax = fig.add_subplot(111)

        # Sample data
        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        # Plot data with a label
        ax.plot(time, speed, label="speed")

        # Add a legend with draggable set to True
        leg = ax.legend()
        leg.set_draggable(True)  # Pickling works after removing this line

        # Attempt to pickle the figure
        pickle.dumps(fig)
    except TypeError as e:
        if "FigureCanvasQTAgg" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    else:
        print("Issue resolved")

test_pickle_figure_with_draggable_legend()
```

This test script follows the specified guidelines:
1. It includes the necessary imports (`matplotlib.pyplot` and `pickle`).
2. It contains the code to reproduce the issue described in the issue text.
3. It prints "Issue reproduced" if the outcome indicates that the issue is reproduced (i.e., a `TypeError` with "FigureCanvasQTAgg" is raised).
4. It prints "Issue resolved" if the figure is pickled successfully without any exceptions.
5. It prints "Other issues" if any other exception is raised.
2025-05-03 14:16:45,422 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_figure_pickling():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling works after removing this line 

        pickle.dumps(fig)
        plt.show()
    except TypeError as e:
        if "cannot pickle 'FigureCanvasQTAgg' object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues:", str(e))
    else:
        print("Issue resolved")

test_figure_pickling()
```
2025-05-03 14:16:45,422 - INFO - raw output:
Certainly! Below is a complete test that you can use to reproduce the issue described in the issue text. This test script will check whether the pickling of a figure with a draggable legend results in the expected error, and it will print the appropriate messages based on the outcome.

```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_draggable_legend() -> None:
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # This line is causing the issue

        # Attempt to pickle the figure
        try:
            pickle.dumps(fig)
            print("Issue resolved")
        except TypeError as e:
            if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
                print("Issue reproduced")
            else:
                print("Other issues")
    except Exception as e:
        print("Other issues", str(e))

test_pickle_draggable_legend()
```

This script attempts to reproduce the pickling issue described in the original issue text. If the error message matches the expected `'TypeError: cannot pickle 'FigureCanvasQTAgg' object'`, it will print "Issue reproduced". If pickling is successful, it will print "Issue resolved". Any other exceptions will result in "Other issues" being printed along with the exception message.
2025-05-03 14:16:45,422 - INFO - raw output:
Certainly! Below is a complete test script that can be used to reproduce and verify the issue described in your issue text:

```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # Pickling fails with this line

        pickle.dumps(fig)
        plt.show()
        print("Issue resolved")
    except TypeError as e:
        if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```

### Explanation:
1. **Necessary imports**: The script imports `matplotlib.pyplot` and `pickle` as needed.
2. **Code to reproduce the issue**: The script contains the exact code provided in the issue text to reproduce the issue.
3. **Print statements for outcomes**:
    - `print("Issue resolved")`: This is printed if the figure is pickled successfully.
    - `print("Issue reproduced")`: This is printed if the specific `TypeError` indicating the pickling issue is raised.
    - `print("Other issues")`: This is printed if any other exceptions are raised.

This test makes it easy to determine if the issue has been resolved or if it is still present.
2025-05-03 14:16:45,422 - INFO - raw output:
Here is the complete test code that you can use to reproduce the issue and verify whether it has been fixed:

```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling works after removing this line 

        try:
            pickle.dumps(fig)
            print("Issue resolved")
        except TypeError as e:
            if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
                print("Issue reproduced")
            else:
                print("Other issues")
    except Exception as e:
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```

This code follows the steps outlined in the issue and has appropriate print statements to indicate whether the issue is reproduced, resolved, or if there are other issues.
2025-05-03 14:16:45,422 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # Issue occurs with this line

        pickle.dumps(fig)
        plt.show()
        print("Issue resolved")
    except TypeError as e:
        if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,422 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickling_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # Pickling works after removing this line

        pickle.dumps(fig)
        plt.show()
        print("Issue resolved")
    except TypeError as e:
        if "cannot pickle 'FigureCanvasQTAgg' object" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")
        print(e)

test_pickling_with_draggable_legend()
```

This test script:

1. Imports the necessary modules.
2. Creates a plot with a draggable legend.
3. Attempts to pickle the figure.
4. Catches the specific `TypeError` that matches the described issue and prints "Issue reproduced".
5. Prints "Issue resolved" if no errors are encountered.
6. Prints "Other issues" for any other exceptions.
2025-05-03 14:16:45,423 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickling_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time=[0,1,2,3,4]
        speed=[40,43,45,47,48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # This line causes the pickling issue

        try:
            pickle.dumps(fig)
            plt.show()
            print("Issue resolved")
        except TypeError as e:
            if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
                print("Issue reproduced")
            else:
                print("Other issues")
    except Exception as ex:
        print(f"Other issues: {ex}")

test_pickling_figure_with_draggable_legend()
```
2025-05-03 14:16:45,423 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickling_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0,1,2,3,4]
        speed = [40,43,45,47,48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # Pickling fails when this line is included

        # Attempt to pickle the figure
        pickle.dumps(fig)
        plt.show()
        print("Issue resolved")
    except TypeError as e:
        if "FigureCanvasQTAgg" in str(e):
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        print("Other issues")

test_pickling_draggable_legend()
```
2025-05-03 14:16:45,423 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

# Define the test function
def test_pickle_draggable_legend():
    try:
        # Create a figure and a subplot
        fig = plt.figure()
        ax = fig.add_subplot(111)

        # Sample data
        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        # Plot the data
        ax.plot(time, speed, label="speed")

        # Add a legend and make it draggable
        leg = ax.legend()
        leg.set_draggable(True)

        # Try to pickle the figure
        pickle.dumps(fig)

        # Show the plot (for completeness, not necessary for the test)
        plt.show()

    except TypeError as e:
        # Check if the error is specific to the described issue
        if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        # Catch any other exceptions that may occur
        print("Other issues")
    else:
        # If no exceptions are raised, the issue is resolved
        print("Issue resolved")

# Run the test
test_pickle_draggable_legend()
```
2025-05-03 14:16:45,423 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        # Code to reproduce the issue described in the issue text
        fig = plt.figure()
        ax = fig.add_subplot(111)
        
        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]
        
        ax.plot(time, speed, label="speed")
        
        leg = ax.legend()
        leg.set_draggable(True)  # pickling fails with this line
        
        # Attempt to pickle the figure
        pickle.dumps(fig)
        plt.show()
        
        # If no exception was raised, the issue is resolved
        print("Issue resolved")
    except TypeError as e:
        if str(e) == "cannot pickle 'FigureCanvasQTAgg' object":
            print("Issue reproduced")
        else:
            print("Other issues")
    except Exception as e:
        # Catch any other exceptions that may occur
        print(f"Other issues: {e}")

# Run the test
test_pickle_figure_with_draggable_legend()
```
2025-05-03 14:16:45,423 - INFO - raw output:
```python
import matplotlib.pyplot as plt
import pickle

def test_pickle_figure_with_draggable_legend():
    try:
        fig = plt.figure()
        ax = fig.add_subplot(111)

        time = [0, 1, 2, 3, 4]
        speed = [40, 43, 45, 47, 48]

        ax.plot(time, speed, label="speed")

        leg = ax.legend()
        leg.set_draggable(True)  # pickling works after removing this line

        try:
            pickle.dumps(fig)
            plt.show()
            print("Issue resolved")
        except TypeError as e:
            if 'FigureCanvasQTAgg' in str(e):
                print("Issue reproduced")
            else:
                print("Other issues")
    except Exception as e:
        print("Other issues:", e)

test_pickle_figure_with_draggable_legend()
```
